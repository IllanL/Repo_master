print("model 3")
fit3<-HoltWinters(train, seasonal="add") #Modelo de clasico de Holtwinter (similar exponencial smoothing) aditivo
fcast3 <-forecast :: forecast(fit3, h=npred,level = 0)
print("model 4")
fit4<-HoltWinters(train,seasonal = "mult") #Modelo de clasico de Holtwinter multiplicativo
fcast4 <-forecast :: forecast(fit4,h=npred,level = 0)
print("model 5")
fit5 <- tbats(train) #Modelo TBATS, suele usarse cuando hay multiples patrones ciclicos, podria detectar algunos patrones dificiles en nuestra serie
fcast5 <- forecast :: forecast(fit5, h=npred,level = 0)
print("model 6")
lam <- BoxCox.lambda(train)
fit6 <- ets(train, additive=TRUE, lambda=lam) #Modelo exponencial smoothing con transformacion de Box.Cox
fcast6 <-forecast :: forecast(fit6,h=npred,level = 0)
print("model 7")
fit7 <- auto.arima(train) #ARIMA
fcast7 <-forecast :: forecast(fit7,h=npred,level = 0)
pred<-data.frame(fcast1$mean,fcast2$mean,fcast3$mean,fcast4$mean,fcast5$mean,fcast6$mean,fcast7$mean)
for(j in 1:length(pred)){
errordf[i,j]<-mean(abs(pred[,j]-test))
}
}
#Debido al coste que genera la CV, guardamos el resultado por si en alg?n caso por error lo borramos
save(errordf,file= paste0(getwd(),"./data_out/errordf.Rdata"))
pred
errordf
for(i in 1:20){
for(j in 1:length(pred)){
errordf[i,j]<-mean(abs(pred[,j]-test)/test)
}
}
errordf
errordf<-errordf[[1,]]
errordf<-errordf[[1,:]]
errordf<-errordf[1,]
errordf
{
print(i)
train<-window(y,end=c(end(y)[1]-(20-i+1),npred))
test<-window(y,start=c(end(y)[1]-(20-i),1),end=c(end(y)[1]-(20-i),npred))
print("model 1")
fit1<-tslm(train ~ trend + season) #Modelo de regresion lineal
fcast1 <- forecast :: forecast(fit1, h = npred , level = 0)
print("model 2")
fit2<-ets(train,ic="aic") #Modelo de exponencial smoothing sin transformaci?n de Box-Cox
fcast2 <- forecast :: forecast(fit2,h=npred,level = 0)
print("model 3")
fit3<-HoltWinters(train, seasonal="add") #Modelo de clasico de Holtwinter (similar exponencial smoothing) aditivo
fcast3 <-forecast :: forecast(fit3, h=npred,level = 0)
print("model 4")
fit4<-HoltWinters(train,seasonal = "mult") #Modelo de clasico de Holtwinter multiplicativo
fcast4 <-forecast :: forecast(fit4,h=npred,level = 0)
print("model 5")
fit5 <- tbats(train) #Modelo TBATS, suele usarse cuando hay multiples patrones ciclicos, podria detectar algunos patrones dificiles en nuestra serie
fcast5 <- forecast :: forecast(fit5, h=npred,level = 0)
print("model 6")
lam <- BoxCox.lambda(train)
fit6 <- ets(train, additive=TRUE, lambda=lam) #Modelo exponencial smoothing con transformacion de Box.Cox
fcast6 <-forecast :: forecast(fit6,h=npred,level = 0)
print("model 7")
fit7 <- auto.arima(train) #ARIMA
fcast7 <-forecast :: forecast(fit7,h=npred,level = 0)
pred<-data.frame(fcast1$mean,fcast2$mean,fcast3$mean,fcast4$mean,fcast5$mean,fcast6$mean,fcast7$mean)
for(j in 1:length(pred)){
errordf[i,j]<-mean(abs(pred[,j]-test))
}
}
load("C:/Users/Illan/Desktop/COSAS KSCHOOL/01--CLASES R/Time_Series/errordf.Rdata")
View(errordf)
for(i in 1:20){
print(i)
train<-window(y,end=c(end(y)[1]-(20-i+1),npred))
test<-window(y,start=c(end(y)[1]-(20-i),1),end=c(end(y)[1]-(20-i),npred))
print("model 1")
fit1<-tslm(train ~ trend + season) #Modelo de regresion lineal
fcast1 <- forecast :: forecast(fit1, h = npred , level = 0)
print("model 2")
fit2<-ets(train,ic="aic") #Modelo de exponencial smoothing sin transformaci?n de Box-Cox
fcast2 <- forecast :: forecast(fit2,h=npred,level = 0)
print("model 3")
fit3<-HoltWinters(train, seasonal="add") #Modelo de clasico de Holtwinter (similar exponencial smoothing) aditivo
fcast3 <-forecast :: forecast(fit3, h=npred,level = 0)
print("model 4")
fit4<-HoltWinters(train,seasonal = "mult") #Modelo de clasico de Holtwinter multiplicativo
fcast4 <-forecast :: forecast(fit4,h=npred,level = 0)
print("model 5")
fit5 <- tbats(train) #Modelo TBATS, suele usarse cuando hay multiples patrones ciclicos, podria detectar algunos patrones dificiles en nuestra serie
fcast5 <- forecast :: forecast(fit5, h=npred,level = 0)
print("model 6")
lam <- BoxCox.lambda(train)
fit6 <- ets(train, additive=TRUE, lambda=lam) #Modelo exponencial smoothing con transformacion de Box.Cox
fcast6 <-forecast :: forecast(fit6,h=npred,level = 0)
print("model 7")
fit7 <- auto.arima(train) #ARIMA
fcast7 <-forecast :: forecast(fit7,h=npred,level = 0)
pred<-data.frame(fcast1$mean,fcast2$mean,fcast3$mean,fcast4$mean,fcast5$mean,fcast6$mean,fcast7$mean)
for(j in 1:length(pred)){
errordf[i,j]<-mean(abs(pred[,j]-test))
}
}
for(i in 1:20){
print(i)
train<-window(y,end=c(end(y)[1]-(20-i+1),npred))
test<-window(y,start=c(end(y)[1]-(20-i),1),end=c(end(y)[1]-(20-i),npred))
print("model 1")
fit1<-tslm(train ~ trend + season) #Modelo de regresion lineal
fcast1 <- forecast :: forecast(fit1, h = npred , level = 0)
print("model 2")
fit2<-ets(train,ic="aic") #Modelo de exponencial smoothing sin transformaci?n de Box-Cox
fcast2 <- forecast :: forecast(fit2,h=npred,level = 0)
print("model 3")
fit3<-HoltWinters(train, seasonal="add") #Modelo de clasico de Holtwinter (similar exponencial smoothing) aditivo
fcast3 <-forecast :: forecast(fit3, h=npred,level = 0)
print("model 4")
fit4<-HoltWinters(train,seasonal = "mult") #Modelo de clasico de Holtwinter multiplicativo
fcast4 <-forecast :: forecast(fit4,h=npred,level = 0)
print("model 5")
fit5 <- tbats(train) #Modelo TBATS, suele usarse cuando hay multiples patrones ciclicos, podria detectar algunos patrones dificiles en nuestra serie
fcast5 <- forecast :: forecast(fit5, h=npred,level = 0)
print("model 6")
lam <- BoxCox.lambda(train)
fit6 <- ets(train, additive=TRUE, lambda=lam) #Modelo exponencial smoothing con transformacion de Box.Cox
fcast6 <-forecast :: forecast(fit6,h=npred,level = 0)
print("model 7")
fit7 <- auto.arima(train) #ARIMA
fcast7 <-forecast :: forecast(fit7,h=npred,level = 0)
pred<-data.frame(fcast1$mean,fcast2$mean,fcast3$mean,fcast4$mean,fcast5$mean,fcast6$mean,fcast7$mean)
for(j in 1:length(pred)){
errordf[i,j]<-mean(abs(pred[,j]-test))
}
}
errordf
errordf
for(i in 1:7){
if(i==1){
plot(errordf[,1],type="l",lwd=2,col=(i+1),
ylab="MAE",xlab = "Iteration",
main="Evoluci\u00f3n de CV para cada modelo")
}else{
lines(errordf[,i],col=(i+1),lwd=2)}
}
barplot(m,ylab = "Mean of MAE", xlab = "Models",col="blue",
main="Media de MAE para cada modelo utilizado en CV",ylim=c(0,5))
m<-colMeans(errordf)
barplot(m,ylab = "Mean of MAE", xlab = "Models",col="blue",
main="Media de MAE para cada modelo utilizado en CV",ylim=c(0,5))
save(m,file=paste0(getwd(),"./data_out/matrixbarplot.Rdata"))
#Cargamos los datos del script download
data_price<-fread("./data_in/energy.csv",sep=",")
data_price<-as.data.frame(data_price)
data_price$V1<-NULL
y<-ts(data_price$price_spain,frequency = 24) #Serie historica de precios
npred<-24
fit5 <- tbats(y)
fcast5 <- forecast::forecast(fit5, h=npred)
#Las siguientes lineas permiten "acomodar" los datos para ser ploteados
df<-data.frame(price_spain=as.data.frame(fcast5)[,"Point Forecast"],
datetime=as.POSIXct(paste0(Sys.Date()," ",01:24,":00:00"),format="%Y-%m-%d %H:%M:%S",tz="UTC"))
df<-rbind(data_price[,c("price_spain","datetime")],df)
#Datos del plot principal
x<-as.POSIXct(df$datetime,format="%Y-%m-%d %H:%M:%S",tz="UTC")
y<-df$price_spain
x<-as.POSIXct(data_price$datetime,format="%Y-%m-%d %H:%M:%S",tz="UTC")
y<-data_price$price_spain
#Datos del plot adicional (prevision)
x2<-as.POSIXct(paste0(Sys.Date()," ",01:24,":00:00"),format="%Y-%m-%d %H:%M:%S",tz="UTC")
y2<-as.data.frame(fcast5)[,"Point Forecast"]
#Opciones del plot
f <- list(
family = "Courier New, monospace",
size = 18)
#Plot con herramienta plot.ly
forecastplot<-plot_ly(x = x, y = y, mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
forecastplot<-plot_ly(x = x[(length(x)-120):length(x)], y = y[(length(x)-120):length(x)], mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
forecastplot<-plot_ly(x = x[(length(x)-120):length(x)], y = y[(length(x)-120):length(x)], mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
save(forecastplot,file=paste0(getwd(),"./data_out/forecastplot.Rdata"))
forecast_export<-data.frame(datetime=x2,forecast=y2)
write.csv(forecast_export,file = paste0(getwd(),"./data_out/forecast",gsub("-","",Sys.Date()),".csv"))
fcast5
#Plot con herramienta plot.ly
forecastplot<-plot_ly(x = x, y = y, mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
forecastplot<-plot_ly(x = x, y = y, mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
#Datos del plot principal
x<-as.POSIXct(df$datetime,format="%Y-%m-%d %H:%M:%S",tz="UTC")
y<-df$price_spain
plot(x,y)
?plot
?plotly
?plot
plot(x,y,style="-")
plot(x,y, "-")
plot(x,y,type = "l")
plot(x,y,type = "l")
plot(x2,y2,type = "l")
forecastplot<-plot_ly(x = x, y = y, mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
forecastplot
forecastplot<-plot_ly(x = x[(length(x)-120):length(x)], y = y[(length(x)-120):length(x)], mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
forecastplot
fcast5 <- forecast::forecast(fit6, h=npred)
#Cargamos los datos del script download
data_price<-fread("./data_in/energy.csv",sep=",")
data_price<-as.data.frame(data_price)
data_price$V1<-NULL
y<-ts(data_price$price_spain,frequency = 24) #Serie historica de precios
npred<-24
fit5 <- tbats(y)
fcast5 <- forecast::forecast(fit6, h=npred)
#Las siguientes lineas permiten "acomodar" los datos para ser ploteados
df<-data.frame(price_spain=as.data.frame(fcast5)[,"Point Forecast"],
datetime=as.POSIXct(paste0(Sys.Date()," ",01:24,":00:00"),format="%Y-%m-%d %H:%M:%S",tz="UTC"))
df<-rbind(data_price[,c("price_spain","datetime")],df)
#Datos del plot principal
x<-as.POSIXct(df$datetime,format="%Y-%m-%d %H:%M:%S",tz="UTC")
y<-df$price_spain
x<-as.POSIXct(data_price$datetime,format="%Y-%m-%d %H:%M:%S",tz="UTC")
y<-data_price$price_spain
#Datos del plot adicional (prevision)
x2<-as.POSIXct(paste0(Sys.Date()," ",01:24,":00:00"),format="%Y-%m-%d %H:%M:%S",tz="UTC")
y2<-as.data.frame(fcast5)[,"Point Forecast"]
#Opciones del plot
f <- list(
family = "Courier New, monospace",
size = 18)
#Plot con herramienta plot.ly
forecastplot<-plot_ly(x = x, y = y, mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
forecastplot<-plot_ly(x = x[(length(x)-120):length(x)], y = y[(length(x)-120):length(x)], mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
forecastplot
#Cargamos los datos del script download
data_price<-fread("./data_in/energy.csv",sep=",")
data_price<-as.data.frame(data_price)
data_price$V1<-NULL
y<-ts(data_price$price_spain,frequency = 24) #Serie historica de precios
npred<-24
fit5 <- tbats(y)
fcast5 <- forecast::forecast(fit2, h=npred)
#Las siguientes lineas permiten "acomodar" los datos para ser ploteados
df<-data.frame(price_spain=as.data.frame(fcast5)[,"Point Forecast"],
datetime=as.POSIXct(paste0(Sys.Date()," ",01:24,":00:00"),format="%Y-%m-%d %H:%M:%S",tz="UTC"))
df<-rbind(data_price[,c("price_spain","datetime")],df)
#Datos del plot principal
x<-as.POSIXct(df$datetime,format="%Y-%m-%d %H:%M:%S",tz="UTC")
y<-df$price_spain
x<-as.POSIXct(data_price$datetime,format="%Y-%m-%d %H:%M:%S",tz="UTC")
y<-data_price$price_spain
#Datos del plot adicional (prevision)
x2<-as.POSIXct(paste0(Sys.Date()," ",01:24,":00:00"),format="%Y-%m-%d %H:%M:%S",tz="UTC")
y2<-as.data.frame(fcast5)[,"Point Forecast"]
#Opciones del plot
f <- list(
family = "Courier New, monospace",
size = 18)
#Plot con herramienta plot.ly
forecastplot<-plot_ly(x = x, y = y, mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
forecastplot<-plot_ly(x = x[(length(x)-120):length(x)], y = y[(length(x)-120):length(x)], mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
fit2<-ets(train,ic="aic") #Modelo de exponencial smoothing sin transformaci?n de Box-Cox
fit3<-HoltWinters(train, seasonal="add") #Modelo de clasico de Holtwinter (similar exponencial smoothing) aditivo
fit4<-HoltWinters(train,seasonal = "mult") #Modelo de clasico de Holtwinter multiplicativo
fit5 <- tbats(train) #Modelo TBATS
lam <- BoxCox.lambda(train)
fit6 <- ets(train, additive=TRUE, lambda=lam)
fit7 <- auto.arima(train) #ARIMA
npred<-24
fit5 <- tbats(y)
fcast5 <- forecast::forecast(fit2, h=npred)
#Las siguientes lineas permiten "acomodar" los datos para ser ploteados
df<-data.frame(price_spain=as.data.frame(fcast5)[,"Point Forecast"],
datetime=as.POSIXct(paste0(Sys.Date()," ",01:24,":00:00"),format="%Y-%m-%d %H:%M:%S",tz="UTC"))
df<-rbind(data_price[,c("price_spain","datetime")],df)
#Datos del plot principal
x<-as.POSIXct(df$datetime,format="%Y-%m-%d %H:%M:%S",tz="UTC")
y<-df$price_spain
x<-as.POSIXct(data_price$datetime,format="%Y-%m-%d %H:%M:%S",tz="UTC")
y<-data_price$price_spain
#Datos del plot adicional (prevision)
x2<-as.POSIXct(paste0(Sys.Date()," ",01:24,":00:00"),format="%Y-%m-%d %H:%M:%S",tz="UTC")
y2<-as.data.frame(fcast5)[,"Point Forecast"]
#Opciones del plot
f <- list(
family = "Courier New, monospace",
size = 18)
#Plot con herramienta plot.ly
forecastplot<-plot_ly(x = x, y = y, mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
forecastplot<-plot_ly(x = x[(length(x)-120):length(x)], y = y[(length(x)-120):length(x)], mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
forecastplot
#Lectura forecastplot
load(paste0(getwd(),"./data_out/forecastplot.Rdata"))
#Modificacion de la fuente
f <- list(
family = "Courier New, monospace",
size = 18)
#Plot de evolucion del error para cada simulacion
errorplot<-plot_ly(x = 1:20, y = errordf$err5, mode = 'lines+markers',type = 'scatter',showlegend=F) %>%
plotly::layout(title = paste("Evoluci\u00f3n del error de previsi\u00f3n para el modelo seleccionado"),
xaxis = list(title="Simulaci\u00f3n",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
errorplot
#Lectura matriz media MAE
load(paste0(getwd(),"./data_out/matrixbarplot.Rdata"))
#Construimos el "Dashboard" mediante subplots
subplot(forecastplot, errorplot, barplot,
nrows = 3, margin = 0.05, heights = c(0.30, 0.30, 0.30),titleX = F,titleY = T)%>%
plotly::layout(title = "Dashboard",
showlegend=T,
annotations = list(
list(x = 0.5 , y = 0.98, text = "Prevision del precio de energ\u00eda en el sistema espa\u00f1ol para el d\u00eda 19-09-2017", showarrow = F, xref='paper', yref='paper'),
list(x = 0.5 , y = 0.63, text = "Evoluci\u00f3n del error de previsi\u00f3n para el modelo seleccionado", showarrow = F, xref='paper', yref='paper'),
list(x = 0.5 , y = 0.30, text = "Error medio absoluto (promedio de cada prueba)", showarrow = F, xref='paper', yref='paper'))
)
#Lectura forecastplot
load(paste0(getwd(),"./data_out/forecastplot.Rdata"))
#Lectura matriz evolucion de errores
load(paste0(getwd(),"./data_out/errordf.Rdata"))
#Modificacion de la fuente
f <- list(
family = "Courier New, monospace",
size = 18)
#Plot de evolucion del error para cada simulacion
errorplot<-plot_ly(x = 1:20, y = errordf$err5, mode = 'lines+markers',type = 'scatter',showlegend=F) %>%
plotly::layout(title = paste("Evoluci\u00f3n del error de previsi\u00f3n para el modelo seleccionado"),
xaxis = list(title="Simulaci\u00f3n",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
errorplot
#Lectura matriz media MAE
load(paste0(getwd(),"./data_out/matrixbarplot.Rdata"))
#Barplot de la media de los MAE
barplot <- plot_ly(
x = names(m),
y = m,
type = "bar",showlegend=F,
marker = list(color = c('rgba(204,204,204,1)','rgba(204,204,204,1)',
'rgba(204,204,204,1)', 'rgba(204,204,204,1)',
'rgba(222,45,38,0.8)','rgba(204,204,204,1)',
'rgba(204,204,204,1)'))
)%>%
plotly::layout(title = "Error medio absoluto (promedio de cada prueba)",
xaxis = list(title = "Modelos",titlefont = f),
yaxis = list(title = "Eur/MWh",titlefont = f))
#Construimos el "Dashboard" mediante subplots
subplot(forecastplot, errorplot, barplot,
nrows = 3, margin = 0.05, heights = c(0.30, 0.30, 0.30),titleX = F,titleY = T)%>%
plotly::layout(title = "Dashboard",
showlegend=T,
annotations = list(
list(x = 0.5 , y = 0.98, text = "Prevision del precio de energ\u00eda en el sistema espa\u00f1ol para el d\u00eda 19-09-2017", showarrow = F, xref='paper', yref='paper'),
list(x = 0.5 , y = 0.63, text = "Evoluci\u00f3n del error de previsi\u00f3n para el modelo seleccionado", showarrow = F, xref='paper', yref='paper'),
list(x = 0.5 , y = 0.30, text = "Error medio absoluto (promedio de cada prueba)", showarrow = F, xref='paper', yref='paper'))
)
#Lectura forecastplot
load(paste0(getwd(),"./data_out/forecastplot.Rdata"))
#Lectura matriz evolucion de errores
load(paste0(getwd(),"./data_out/errordf.Rdata"))
#Modificacion de la fuente
f <- list(
family = "Courier New, monospace",
size = 18)
#Plot de evolucion del error para cada simulacion
errorplot<-plot_ly(x = 1:20, y = errordf$err5, mode = 'lines+markers',type = 'scatter',showlegend=F) %>%
plotly::layout(title = paste("Evoluci\u00f3n del error de previsi\u00f3n para el modelo seleccionado"),
xaxis = list(title="Simulaci\u00f3n",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
errorplot
#Lectura matriz media MAE
load(paste0(getwd(),"./data_out/matrixbarplot.Rdata"))
#Barplot de la media de los MAE
barplot <- plot_ly(
x = names(m),
y = m,
type = "bar",showlegend=F,
marker = list(color = c('rgba(204,204,204,1)','rgba(204,204,204,1)',
'rgba(204,204,204,1)', 'rgba(204,204,204,1)',
'rgba(222,45,38,0.8)','rgba(204,204,204,1)',
'rgba(204,204,204,1)'))
)%>%
plotly::layout(title = "Error medio absoluto (promedio de cada prueba)",
xaxis = list(title = "Modelos",titlefont = f),
yaxis = list(title = "Eur/MWh",titlefont = f))
#Construimos el "Dashboard" mediante subplots
subplot(forecastplot, errorplot, barplot,
nrows = 3, margin = 0.05, heights = c(0.30, 0.30, 0.30),titleX = F,titleY = T)%>%
plotly::layout(title = "Dashboard",
showlegend=T,
annotations = list(
list(x = 0.5 , y = 0.98, text = "Prevision del precio de energ\u00eda en el sistema espa\u00f1ol para el d\u00eda 19-09-2017", showarrow = F, xref='paper', yref='paper'),
list(x = 0.5 , y = 0.63, text = "Evoluci\u00f3n del error de previsi\u00f3n para el modelo seleccionado", showarrow = F, xref='paper', yref='paper'),
list(x = 0.5 , y = 0.30, text = "Error medio absoluto (promedio de cada prueba)", showarrow = F, xref='paper', yref='paper'))
)
y<-ts(data_price$price_spain,frequency = 24) #Serie historica de precios
npred<-24
fit5 <- tbats(y)
fcast5 <- forecast::forecast(fit7, h=npred)
#Las siguientes lineas permiten "acomodar" los datos para ser ploteados
df<-data.frame(price_spain=as.data.frame(fcast5)[,"Point Forecast"],
datetime=as.POSIXct(paste0(Sys.Date()," ",01:24,":00:00"),format="%Y-%m-%d %H:%M:%S",tz="UTC"))
df<-rbind(data_price[,c("price_spain","datetime")],df)
#Datos del plot principal
x<-as.POSIXct(df$datetime,format="%Y-%m-%d %H:%M:%S",tz="UTC")
y<-df$price_spain
x<-as.POSIXct(data_price$datetime,format="%Y-%m-%d %H:%M:%S",tz="UTC")
y<-data_price$price_spain
#Datos del plot adicional (prevision)
x2<-as.POSIXct(paste0(Sys.Date()," ",01:24,":00:00"),format="%Y-%m-%d %H:%M:%S",tz="UTC")
y2<-as.data.frame(fcast5)[,"Point Forecast"]
#Opciones del plot
f <- list(
family = "Courier New, monospace",
size = 18)
#Plot con herramienta plot.ly
forecastplot<-plot_ly(x = x, y = y, mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
forecastplot<-plot_ly(x = x[(length(x)-120):length(x)], y = y[(length(x)-120):length(x)], mode = 'lines',type = 'scatter',name="Hist\u00f3rico") %>%
add_trace(x=x2, y = y2, name = "Previsi\u00f3n") %>%
plotly::layout(title = paste("Previsi\u00f3n del mercado diario de energ\u00eda en el sistema espa\u00f1ol  para el d\u00eda",Sys.Date()),
xaxis = list(title="Datetime",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
save(forecastplot,file=paste0(getwd(),"./data_out/forecastplot.Rdata"))
#Generamos una tabla con los resultados de la previsi?n
forecast_export<-data.frame(datetime=x2,forecast=y2)
write.csv(forecast_export,file = paste0(getwd(),"./data_out/forecast",gsub("-","",Sys.Date()),".csv"))
forecastplot
#Lectura forecastplot
load(paste0(getwd(),"./data_out/forecastplot.Rdata"))
#Lectura matriz evolucion de errores
load(paste0(getwd(),"./data_out/errordf.Rdata"))
#Modificacion de la fuente
f <- list(
family = "Courier New, monospace",
size = 18)
#Plot de evolucion del error para cada simulacion
errorplot<-plot_ly(x = 1:20, y = errordf$err5, mode = 'lines+markers',type = 'scatter',showlegend=F) %>%
plotly::layout(title = paste("Evoluci\u00f3n del error de previsi\u00f3n para el modelo seleccionado"),
xaxis = list(title="Simulaci\u00f3n",titlefont = f),
yaxis = list(title="Eur/MWh",titlefont = f))
errorplot
#Lectura matriz media MAE
load(paste0(getwd(),"./data_out/matrixbarplot.Rdata"))
#Barplot de la media de los MAE
barplot <- plot_ly(
x = names(m),
y = m,
type = "bar",showlegend=F,
marker = list(color = c('rgba(204,204,204,1)','rgba(204,204,204,1)',
'rgba(204,204,204,1)', 'rgba(204,204,204,1)',
'rgba(222,45,38,0.8)','rgba(204,204,204,1)',
'rgba(204,204,204,1)'))
)%>%
plotly::layout(title = "Error medio absoluto (promedio de cada prueba)",
xaxis = list(title = "Modelos",titlefont = f),
yaxis = list(title = "Eur/MWh",titlefont = f))
#Construimos el "Dashboard" mediante subplots
subplot(forecastplot, errorplot, barplot,
nrows = 3, margin = 0.05, heights = c(0.30, 0.30, 0.30),titleX = F,titleY = T)%>%
plotly::layout(title = "Dashboard",
showlegend=T,
annotations = list(
list(x = 0.5 , y = 0.98, text = "Prevision del precio de energ\u00eda en el sistema espa\u00f1ol para el d\u00eda 19-09-2017", showarrow = F, xref='paper', yref='paper'),
list(x = 0.5 , y = 0.63, text = "Evoluci\u00f3n del error de previsi\u00f3n para el modelo seleccionado", showarrow = F, xref='paper', yref='paper'),
list(x = 0.5 , y = 0.30, text = "Error medio absoluto (promedio de cada prueba)", showarrow = F, xref='paper', yref='paper'))
)
