mlp_fit <- caret::train(x = train_x,
y = train_y,
method = "mlpML",
preProc =  c('center', 'scale', 'knnImpute', 'pca'),
trControl = trainControl(method = "cv", verboseIter = TRUE, returnData = FALSE),
tuneGrid = mlp_grid)
ypred_test_nn<-predict(my_model,my_data_test)
training<-cbind(train_x,train_y)
training<-cbind(train_x,Y=train_y)
training
sample(c(1,0),50,replace = T)
factor(sample(c(1,0),50,replace = T))
train_x<-matrix(rnorm(100),nrow=50,ncol=2)
names(train_x)<-c("X1","X2")
train_y<-factor(sample(c(1,0),50,replace = T))
training<-cbind(train_x,Y=train_y)
training
train_x<-data.frame(matrix(rnorm(100),nrow=50,ncol=2))
names(train_x)<-c("X1","X2")
train_y<-factor(sample(c(1,0),50,replace = T))
training<-train_x
training$Y<-train_y
numFolds <- trainControl(method = 'cv', number = 10, classProbs = TRUE, verboseIter = TRUE, summaryFunction = twoClassSummary, preProcOptions = list(thresh = 0.75, ICAcomp = 3, k = 5))
library(caret)
numFolds <- trainControl(method = 'cv', number = 10, classProbs = TRUE, verboseIter = TRUE, summaryFunction = twoClassSummary, preProcOptions = list(thresh = 0.75, ICAcomp = 3, k = 5))
fit2 <- train(TARGET ~ . -TARGET -ID, data = training, method = 'nnet', preProcess = c('center', 'scale'), trControl = numFolds, tuneGrid=expand.grid(size=c(10), decay=c(0.1)))
fit2 <- train(Y ~ ., data = training, method = 'nnet', preProcess = c('center', 'scale'), trControl = numFolds, tuneGrid=expand.grid(size=c(10), decay=c(0.1)))
train_x<-data.frame(matrix(rnorm(100),nrow=50,ncol=2))
names(train_x)<-c("V1","V2")
train_y<-factor(sample(c(1,0),50,replace = T))
training<-train_x
training$Y<-train_y
numFolds <- trainControl(method = 'cv', number = 10, classProbs = TRUE, verboseIter = TRUE, summaryFunction = twoClassSummary, preProcOptions = list(thresh = 0.75, ICAcomp = 3, k = 5))
fit2 <- train(Y ~ ., data = training, method = 'nnet', preProcess = c('center', 'scale'), trControl = numFolds, tuneGrid=expand.grid(size=c(10), decay=c(0.1)))
training
model <- train(Y~., data = training,
method = "nnet", trControl = ctrl)
model <- train(Y~., data = training,
method = "nnet")
model
rm(list=ls())
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("biglm")){install.packages("biglm",verbose = F) ; library("biglm")}
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
h5ls("./data_in/train_catvnoncat.h5")
my_data_train_x <- h5read("./data_in/train_catvnoncat.h5","train_set_x")
my_data_train_y <- h5read("./data_in/train_catvnoncat.h5","train_set_y")
h5ls("./data_in/test_catvnoncat.h5")
my_data_test_x <- h5read("./data_in/test_catvnoncat.h5","test_set_x")
my_data_test_y <- h5read("./data_in/test_catvnoncat.h5","test_set_y")
#Plot an image
n<-3
r <- matrix(my_data_train_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_train_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_train_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
library(grid)
grid.raster(col, interpolate=FALSE)
my_data_train<-data.frame(matrix(ncol=64*64*3))
# my_data_train<-data.frame(matrix(ncol=64*64))
for(i in 1:209){
print(i)
r <- matrix(my_data_train_x[1,,,i],ncol=64)
g <- matrix(my_data_train_x[2,,,i],ncol=64)
b <- matrix(my_data_train_x[3,,,i],ncol=64)
my_data_train[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
# my_data_train[i,]<-c(as.vector(r))
}
my_data_train<-cbind(Y=my_data_train_y,my_data_train)
my_data_test<-data.frame(matrix(ncol=64*64*3))
# my_data_test<-data.frame(matrix(ncol=64*64))
for(i in 1:50){
print(i)
r <- matrix(my_data_test_x[1,,,i],ncol=64)
g <- matrix(my_data_test_x[2,,,i],ncol=64)
b <- matrix(my_data_test_x[3,,,i],ncol=64)
my_data_test[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
# my_data_test[i,]<-c(as.vector(r))
}
my_data_test<-cbind(Y=my_data_test_y,my_data_test)
my_model <- train(factor(Y) ~ .,  data=my_data_train, method="mlp")
?train
my_model <- train(x=my_data_train[,2:ncol(my_data_train)],y=my_data_train$Y, method="mlp")
my_model <- train(x=as.matrix(my_data_train[,2:ncol(my_data_train)]),y=my_data_train$Y, method="mlp")
library(car)
library(caret)
trainIndex <- createDataPartition(Prestige$income, p=.7, list=F)
prestige.train <- Prestige[trainIndex, ]
prestige.test <- Prestige[-trainIndex, ]
my.grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(5, 6, 7))
prestige.fit <- train(income ~ prestige + education, data = prestige.train,
method = "nnet", maxit = 1000, tuneGrid = my.grid, trace = F, linout = 1)
my.grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(5, 6, 7))
prestige.fit <- caret::train(income ~ prestige + education, data = prestige.train,
method = "nnet", maxit = 1000, tuneGrid = my.grid, trace = F, linout = 1)
my_model <- caret::train(factor(Y) ~ .,  data=my_data_train, method="mlp")
?trainControl
my_control<-trainControl(method = "cv")
my_model <- caret::train(factor(Y) ~ .,
data=my_data_train,
trControl = my_control,
method="mlp")
rm(list=ls())
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("biglm")){install.packages("biglm",verbose = F) ; library("biglm")}
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_image.Rdata")
??load.image
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
cat<-load.image("cate_melon.jpg")
plot(cat)
x<-imresize(im, 2)
x<-imresize(cat, 2)
x
plot(x)
x
plot(x)
?resize
x<-resize(cat,64,64)
x
plot(x)
cat_melon<-load.image("cate_melon.jpg")
cat_melon<-resize(cat_melon,64,64)
as.array(cat_melon)
cat_melon_array<-as.array(cat_melon)
dim(cat_melon_array)
matrix(my_data_test_x[1,,,i],ncol=64)
cat_melon_array
cat_melon_array[1,,,]
cat_melon_array[1,,,2]
cat_melon_array[1,,,2]
cat_melon_array[1,,,]
cat_melon_array[,,,]
cat_melon_array[,,,]
cat_melon_array[,,,1]
49+15
r <- matrix(my_data_test_x[1,,,1],ncol=64)
r <- matrix(my_data_test_x[1,,,1],ncol=64)
g <- matrix(my_data_test_x[2,,,1],ncol=64)
b <- matrix(my_data_test_x[3,,,1],ncol=64)
my_data_test[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
my_data_test<-data.frame(matrix(ncol=64*64*3))
r <- matrix(my_data_test_x[1,,,1],ncol=64)
g <- matrix(my_data_test_x[2,,,1],ncol=64)
b <- matrix(my_data_test_x[3,,,1],ncol=64)
my_data_test[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_test<-predict(my_model,my_data_test)
my_model
my_data_test<-data.frame(matrix(ncol=64*64*3))
r <- matrix(my_data_test_x[1,,,1],ncol=64)
g <- matrix(my_data_test_x[2,,,1],ncol=64)
b <- matrix(my_data_test_x[3,,,1],ncol=64)
my_data_test[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
my_data_test
save.image("my_image2.Rdata")
save.image("my_image2.Rdata")
save.image("my_image.Rdata")
save.image("my_image.Rdata")
?save.image
base::save.image("my_image2.Rdata")
rm(list=ls())
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_image2.Rdata")
cat_melon<-load.image("cat_melon.jpg")
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("biglm")){install.packages("biglm",verbose = F) ; library("biglm")}
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
cat_melon<-load.image("cat_melon.jpg")
cat_melon<-resize(cat_melon,64,64)
cat_melon_array<-as.array(cat_melon)
my_data_test<-data.frame(matrix(ncol=64*64*3))
r <- matrix(cat_melon_array[1,,,1]*255,ncol=64)
g <- matrix(cat_melon_array[2,,,1]*255,ncol=64)
b <- matrix(cat_melon_array[3,,,1]*255,ncol=64)
my_data_test[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_test<-predict(my_model,my_data_test)
ypred_test
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("biglm")){install.packages("biglm",verbose = F) ; library("biglm")}
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_image2.Rdata")
cat_melon<-load.image("pluto1.jpg")
cat_melon<-resize(cat_melon,64,64)
cat_melon_array<-as.array(cat_melon)
my_data_test<-data.frame(matrix(ncol=64*64*3))
r <- matrix(cat_melon_array[1,,,1]*255,ncol=64)
g <- matrix(cat_melon_array[2,,,1]*255,ncol=64)
b <- matrix(cat_melon_array[3,,,1]*255,ncol=64)
my_data_test[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_test<-predict(my_model,my_data_test)
ypred_test
cat_melon<-load.image("pluto3.jpg")
cat_melon<-resize(cat_melon,64,64)
cat_melon_array<-as.array(cat_melon)
my_data_test<-data.frame(matrix(ncol=64*64*3))
r <- matrix(cat_melon_array[1,,,1]*255,ncol=64)
cat_melon<-load.image("pluto3.jpg")
cat_melon<-resize(cat_melon,64,64)
cat_melon_array<-as.array(cat_melon)
my_data_test<-data.frame(matrix(ncol=64*64*3))
r <- matrix(cat_melon_array[1,,,1]*255,ncol=64)
g <- matrix(cat_melon_array[2,,,1]*255,ncol=64)
b <- matrix(cat_melon_array[3,,,1]*255,ncol=64)
my_data_test[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_test<-predict(my_model,my_data_test)
ypred_test
1+1
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
my_data_train[,1:3]
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_image2.Rdata")
mlp_grid <- expand.grid(layer1 = 10,
layer2 = 10,
layer3 = 10)
mlp_fit <- caret::train(x = my_data_train[,1:ncol(my_data_train)],
y = factor(my_data_train$Y),
method = "mlpML",
trControl = trainControl(method = "cv", verboseIter = TRUE, returnData = FALSE),
tuneGrid = mlp_grid)
save(mlp_fit,"my_mlp_3_layers.Rdata")
save(mlp_fit,file="my_mlp_3_layers.Rdata")
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_image2.Rdata")
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_mlp_3_layers.Rdata")
my_data_test
nrow(my_data_test)
my_data_test<-data.frame(matrix(ncol=64*64*3))
for(i in 1:50){
print(i)
r <- matrix(my_data_test_x[1,,,i],ncol=64)
g <- matrix(my_data_test_x[2,,,i],ncol=64)
b <- matrix(my_data_test_x[3,,,i],ncol=64)
my_data_test[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
# my_data_test[i,]<-c(as.vector(r))
}
my_data_test<-cbind(Y=my_data_test_y,my_data_test)
nrow(my_data_test)
ypred_test_nn<-predict(my_model,my_data_test)
ypred_test_nn
table(my_data_test$Y,ypred_test_nn)
my_model
ypred_test
ypred_test_nn
ypred_test
y_pred
ypred
ypred_test_nn<-predict(mlp_fit,my_data_test)
ypred_test_nn
ypred_test_nn<-predict(mlp_fit,my_data_train)
ypred_test_nn
rm(list=c(my_data_test_x,my_data_test_y,my_data_train_x,my_data_train_y))
rm(my_data_test_x,my_data_test_y,my_data_train_x,my_data_train_y)
rm(list=ls())
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
rm(list=ls())
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
a
library(rhdf5)
h5ls("./data_in/train_catvnoncat.h5")
my_data_train_x <- h5read("./data_in/train_catvnoncat.h5","train_set_x")
my_data_train_y <- h5read("./data_in/train_catvnoncat.h5","train_set_y")
h5ls("./data_in/test_catvnoncat.h5")
my_data_test_x <- h5read("./data_in/test_catvnoncat.h5","test_set_x")
my_data_test_y <- h5read("./data_in/test_catvnoncat.h5","test_set_y")
n<-3
g <- matrix(my_data_train_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_train_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
n<-3
r <- matrix(my_data_train_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_train_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_train_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
library(grid)
grid.raster(col, interpolate=FALSE)
my_data_train<-data.frame(matrix(ncol=64*64*3))
for(i in 1:209){
print(i)
r <- matrix(my_data_train_x[1,,,i],ncol=64)
g <- matrix(my_data_train_x[2,,,i],ncol=64)
b <- matrix(my_data_train_x[3,,,i],ncol=64)
my_data_train[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
}
my_data_train<-cbind(Y=my_data_train_y,my_data_train)
my_data_test<-data.frame(matrix(ncol=64*64*3))
for(i in 1:50){
print(i)
r <- matrix(my_data_test_x[1,,,i],ncol=64)
g <- matrix(my_data_test_x[2,,,i],ncol=64)
b <- matrix(my_data_test_x[3,,,i],ncol=64)
my_data_test[i,]<-c(as.vector(r),as.vector(g),as.vector(b))
}
my_data_test<-cbind(Y=my_data_test_y,my_data_test)
rm(my_data_test_x,my_data_test_y,my_data_train_x,my_data_train_y)
)
print(Sys.time(),"Training...")
my_logistic_model <- train(factor(Y) ~ .,  data=my_data_train, method="LogitBoost")
print(Sys.time(),"Done!")
print(Sys.time(),"Training...")
my_logistic_model <- caret::train(factor(Y) ~ .,  data=my_data_train, method="LogitBoost")
print(Sys.time(),"Done!")
print(Sys.time(),"Predict...")
yhat_train_logistic<-predict(my_logistic_model,my_data_train)
print(Sys.time(),"Done!")
print(Sys.time(),"Predict...")
yhat_test_logistic<-predict(my_logistic_model,my_data_test)
print(Sys.time(),"Done!")
print(paste(Sys.time(),"Predict..."))
save.image("my_image.Rdata")
base::save.image("my_image.Rdata")
print(paste(Sys.time(),"Done!"))
conf_matrix_train<-table(yhat_train_logistic,my_data_train$Y)
conf_matrix_train
conf_matrix_test<-table(yhat_test_logistic,my_data_test$Y)
conf_matrix_test
idx_good_test_0<-which(yhat_test_logistic==0 & my_data_test$Y==0)
idx_fn<-which(yhat_test_logistic==0 & my_data_test$Y==1)
idx_fn
n<-4
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
rm(list=ls())
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_image.Rdata")
my_data_train_x <- h5read("./data_in/train_catvnoncat.h5","train_set_x")
my_data_train_y <- h5read("./data_in/train_catvnoncat.h5","train_set_y")
my_data_test_x <- h5read("./data_in/test_catvnoncat.h5","test_set_x")
my_data_test_y <- h5read("./data_in/test_catvnoncat.h5","test_set_y")
base::save.image("my_image.Rdata")
1+1
conf_matrix_train<-table(yhat_train_logistic,my_data_train$Y)
conf_matrix_train
conf_matrix_test<-table(yhat_test_logistic,my_data_test$Y)
conf_matrix_test
idx_tp<-which(yhat_test_logistic==1 & my_data_test$Y==1)
idx_tn<-which(yhat_test_logistic==0 & my_data_test$Y==0)
idx_fp<-which(yhat_test_logistic==1 & my_data_test$Y==0)
idx_fn<-which(yhat_test_logistic==0 & my_data_test$Y==1)
idx_tp
idx_fp
n<-14
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
my_control<-trainControl(method = "cv", verboseIter = TRUE, returnData = FALSE)
my_control<-trainControl(method = "cv", verboseIter = TRUE, returnData = FALSE)
my_mlp_model <- caret::train(factor(Y) ~ .,
data=my_data_train,
trControl = my_control,
method="mlp")
yhat_test_mlp<-predict(my_mlp_model,my_data_test)
table(my_data_test$Y,yhat_test_mlp)
save(my_mlp_model,"simple_mlp.Rdata")
save(my_mlp_model,file="simple_mlp.Rdata")
save(my_data_test,file="my_data_test.Rdata")
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/my_data_test.Rdata")
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Logistic_regression/object_detection/simple_mlp.Rdata")
yhat_test_mlp<-predict(my_mlp_model,my_data_test)
yhat_test_mlp
load("C:/Users/Henry N/Desktop/KSchool/my_course/Supervised_Learning/Computer_vision_(basic_deep_learning)/object_detection/my_image.Rdata")
save.image("kschool.Rdata")
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
a
library(rhdf5)
print(paste(Sys.time(),"Predict..."))
yhat_train_logistic<-predict(my_logistic_model,my_data_train)
print(paste(Sys.time(),"Done!"))
print(paste(Sys.time(),"Predict..."))
yhat_test_logistic<-predict(my_logistic_model,my_data_test)
print(paste(Sys.time(),"Done!"))
conf_matrix_train<-table(yhat_train_logistic,my_data_train$Y)
conf_matrix_train
conf_matrix_test<-table(yhat_test_logistic,my_data_test$Y)
conf_matrix_test
conf_matrix_test<-table(Pred=yhat_test_logistic,Actual=my_data_test$Y)
conf_matrix_test
idx_tp<-which(yhat_test_logistic==1 & my_data_test$Y==1)
idx_tp
n<-48
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
idx_fp<-which(yhat_test_logistic==1 & my_data_test$Y==0)
idx_fp
idx_fn
idx_fn<-which(yhat_test_logistic==0 & my_data_test$Y==1)
idx_fn
n<-43
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
n<-29
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
idx_fp<-which(yhat_test_logistic==1 & my_data_test$Y==0)
idx_fp
n<-36
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
n<-39
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
n<-14
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
idx_fp
n<-28
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
n<-30
r <- matrix(my_data_test_x[1,,,n]/255,ncol=64)
g <- matrix(my_data_test_x[2,,,n]/255,ncol=64)
b <- matrix(my_data_test_x[3,,,n]/255,ncol=64)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col<-t(col)
grid.raster(col, interpolate=FALSE)
my_image<-load.image("pluto3.jpg")
my_image<-resize(my_image,64,64)
my_image_array<-as.array(my_image)
image_test_data<-data.frame(matrix(ncol=64*64*3))
r <- matrix(my_image_array[1,,,1]*255,ncol=64)
g <- matrix(my_image_array[2,,,1]*255,ncol=64)
b <- matrix(my_image_array[3,,,1]*255,ncol=64)
image_test_data[1,]<-c(as.vector(r),as.vector(g),as.vector(b))
ypred_image_test<-predict(my_logistic_model,image_test_data)
ypred_image_test
sum(diag(conf_matrix_test))/sum(conf_matrix_test)
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("caret")){install.packages("caret",verbose = F) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
a
library(rhdf5)
h5ls("./data_in/train_catvnoncat.h5")
h5ls("./data_in/train_catvnoncat.h5")
library("MASS")
datos<-data.frame(matrix(rnorm(=800*20),ncol=20,nrow=800))
datos<-data.frame(matrix(rnorm(800*20),ncol=20,nrow=800))
head(datos)
