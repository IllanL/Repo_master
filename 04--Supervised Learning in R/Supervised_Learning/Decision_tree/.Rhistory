rm(list=ls())
#Lectura de los datos
data(package="ISLR")
carseats<-Carseats
setwd("C:/Users/Henry N/Desktop/KSchool/my_course/day_1/Decision_tree")
rm(list=ls())
#Lectura de los datos
data(package="ISLR")
carseats<-Carseats
#--------------------------------------------------------------------------------------------------- #
#  ____    _                    _           ____                    __   _   _
# / ___|  | |_    __ _   _ __  | |_   _    |  _ \   _ __    ___    / _| (_) | |   ___
# \___ \  | __|  / _` | | '__| | __| (_)   | |_) | | '__|  / _ \  | |_  | | | |  / _ \
#  ___) | | |_  | (_| | | |    | |_   _    |  __/  | |    | (_) | |  _| | | | | |  __/
# |____/   \__|  \__,_| |_|     \__| (_)   |_|     |_|     \___/  |_|   |_| |_|  \___|
#--------------------------------------------------------------------------------------------------- #
if (!require("splines")){install.packages("splines",verbose = F) ; library("splines")}
if (!require("ISLR")){install.packages("ISLR",verbose = F) ; library("ISLR")}
print("All packages and functions have been installed or loaded...")
#----------------------------------------------------------------------------------- #
#  _____               _         ____                    __   _   _
# | ____|  _ __     __| |  _    |  _ \   _ __    ___    / _| (_) | |   ___
# |  _|   | '_ \   / _` | (_)   | |_) | | '__|  / _ \  | |_  | | | |  / _ \
# | |___  | | | | | (_| |  _    |  __/  | |    | (_) | |  _| | | | | |  __/
# |_____| |_| |_|  \__,_| (_)   |_|     |_|     \___/  |_|   |_| |_|  \___|
#----------------------------------------------------------------------------------- #
rm(list=ls())
#Lectura de los datos
data(package="ISLR")
carseats<-Carseats
names(carseats)
#Previsualizacion de los datos
hist(carseats$Sales)
High = ifelse(carseats$Sales<=8, "No", "Yes")
carseats$Sales
carseats = data.frame(carseats, High)
tree.carseats = tree(High~.-Sales, data=carseats)
if (!require("tree")){install.packages("tree",verbose = F) ; library("tree")}
High = ifelse(carseats$Sales<=8, "No", "Yes")
carseats = data.frame(carseats, High)
tree.carseats = tree(High~.-Sales, data=carseats)
plot(carseats)
#Clase de cada variable
sapply(carseats,class)
#Lectura de los datos
data(package="ISLR")
?Carseats
#Borramos los datos
rm(list=ls())
#Lectura de los datos
data(package="ISLR")
carseats<-Carseats
names(carseats)
#---- Pregunta 1: Previsualizacion de los datos ------#
hist(carseats$Sales)
#---- Pregunta 1: Previsualizacion de los datos ------#
hist(carseats$Sales,prob=T)
lines(density(carseats$Sales))
#Clase de cada variable
sapply(carseats,class)
?Carseats
cor(carsears)
cor(carseats)
cor(carseats[1:5])
corplot(cor(carseats[1:5]))
library(corrplot)
corrplot(cor(carseats[1:5]))
?ifelse
carseats$Sales
summary(carseats$Sales)
High = ifelse(carseats$Sales<=8, "No", "Yes")
carseats = data.frame(carseats, High)
head(carseats)
cbind(carseats,High)
head(cbind(carseats,High))
?tree
tree.carseats = tree(High ~ .-Sales, data=carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
tree.carseats
set.seed(101)
train=sample(1:nrow(carseats), 250)
train
tree.carseats = tree(Sales~.-High, carseats, subset=train)
plot(tree.carseats)
text(tree.carseats, pretty=0)
?Carseats
plot(tree.carseats)
text(tree.carseats, pretty = 0)
tree.carseats
tree.pred = predict(tree.carseats, carseats[-train,], type="class")
tree.pred = predict(tree.carseats, carseats[-train,])
tree.pred
#Borramos los datos
rm(list=ls())
#Lectura de los datos
data(package="ISLR")
carseats<-Carseats
names(carseats)
#---- Pregunta 1: Previsualizacion de los datos ------#
hist(carseats$Sales)
#Clase de cada variable
sapply(carseats,class)
#---- Pregunta 2: Clssification decision tree ------#
High = ifelse(carseats$Sales<=8, "No", "Yes")
carseats = data.frame(carseats, High)
tree.carseats = tree(High ~ .-Sales, data=carseats)
summary(tree.carseats)
#---- Pregunta 3: Analisis grafico ------#
plot(tree.carseats)
text(tree.carseats, pretty = 0)
tree.carseats
#---- Pregunta 4 y 5: Estimaci?n con decision trees ------#
set.seed(101)
train=sample(1:nrow(carseats), 250)
tree.pred = predict(tree.carseats, carseats[-train,],type = "class")
tree.pred
table(tree.pred)
with(carseats[-train,], table(tree.pred, High))
conf_matrix<-with(carseats[-train,], table(tree.pred, High))
conf_matrix[2,2]/sum(conf_matrix[,2])
conf_matrix[1,1]/sum(conf_matrix[,1])
(conf_matrix[1,1]+conf_matrix[2,2])/sum(conf_matrix)
cv.carseats = cv.tree(tree.carseats_reg, FUN = prune.misclass)
tree.carseats_reg = tree(Sales~.-High, carseats, subset=train)
cv.carseats = cv.tree(tree.carseats_reg, FUN = prune.misclass)
cv.carseats = cv.tree(tree.carseats, FUN = prune.misclass)
cv.carseats
?cv.tree
plot(cv.carseats)
prune.carseats = prune.misclass(tree.carseats, best = 12)
plot(prune.carseats)
text(prune.carseats, pretty=0)
tree.pred = predict(prune.carseats, carseats[-train,], type="class")
with(carseats[-train,], table(tree.pred, High))
High
table(High)
if (!require("ISLR")){install.packages("ISLR",verbose = F) ; library("ISLR")}
if (!require("tree")){install.packages("tree",verbose = F) ; library("tree")}
print("All packages and functions have been installed or loaded...")
#Lectura de los datos
data(package="ISLR")
carseats<-Carseats
names(carseats)
#---- Pregunta 1: Previsualizacion de los datos ------#
hist(carseats$Sales)
line(carseats$Sales)
#Clase de cada variable
sapply(NULL,class)
#Clase de cada variable
sapply(carseats,class)
#creamos una variable dicotomica para sales
High = ifelse(carseats$Sales<=8, "No", "Yes")
carseats = data.frame(carseats, High)
#creamos un decision tree para todo el dataset menos Sales
tree.carseats = tree(High~.-Sales, data=carseats)
#vemos los resultados del arbol
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
set.seed(101) #para que puedan obtener todos el mismo valor
train=sample(1:nrow(carseats), NULL) #tomamos 250 valores del dataset
set.seed(101) #para que puedan obtener todos el mismo valor
train=sample(1:nrow(carseats), 250) #tomamos 250 valores del dataset
#Creamos el decision tree solo con los indices de train
tree.carseats = tree(High~NULL, carseats, subset=train)
#visualizamos
plot(tree.carseats)
#visualizamos
plot(tree.carseats)
text(tree.carseats, pretty=0)
#Creamos el decision tree solo con los indices de train
tree.carseats = tree(High~NULL, carseats, subset=train)
plot(tree.carseats)
set.seed(101) #para que puedan obtener todos el mismo valor
train=sample(1:nrow(carseats), 250) #tomamos 250 valores del dataset
#Creamos el decision tree solo con los indices de train
tree.carseats = tree(High~NULL, carseats, subset=train)
#visualizamos
plot(tree.carseats)
hist(carseats$Sales)
line(carseats$Sales)
#Clase de cada variable
sapply(carseats,class)
#---- Pregunta 2: Clssification decision tree ------#
#creamos una variable dicotomica para sales
High = ifelse(carseats$Sales<=8, "No", "Yes")
carseats = data.frame(carseats, High)
#creamos un decision tree para todo el dataset menos Sales
tree.carseats = tree(High~.-Sales, data=carseats)
#vemos los resultados del arbol
summary(tree.carseats)
set.seed(101) #para que puedan obtener todos el mismo valor
train=sample(1:nrow(carseats), 250) #tomamos 250 valores del dataset
#Creamos el decision tree solo con los indices de train
tree.carseats = tree(High~NULL, carseats, subset=train)
#visualizamos
plot(tree.carseats)
text(tree.carseats, pretty=0)
#matriz de confusion solo para datos de test
with(carseats[-train,], table(tree.pred, High))
tree.pred = predict(tree.carseats, carseats[-train,], type="class")
#matriz de confusion solo para datos de test
with(carseats[-train,], table(tree.pred, High))
# Vamos a usar la validación cruzada para podar el arbol de manera optima.
# prune.misclass usa el error de clasificación errónea como la base parahacer la poda.
cv.carseats = cv.tree(tree.carseats, FUN =prune.misclass,K = 10)
set.seed(101) #para que puedan obtener todos el mismo valor
train=sample(1:nrow(carseats), 250) #tomamos 250 valores del dataset
#Creamos el decision tree solo con los indices de train
tree.carseats = tree(High~.-Sales, carseats, subset=train)
#visualizamos
plot(tree.carseats)
text(tree.carseats, pretty=0)
# Se ve un poco distingo debido al conjunto de datos ligeramente diferente.
tree.pred = predict(tree.carseats, carseats[-train,], type="class")
#matriz de confusion solo para datos de test
with(carseats[-train,], table(tree.pred, High))
set.seed(101) #para que puedan obtener todos el mismo valor
train=sample(1:nrow(carseats), 250) #tomamos 250 valores del dataset
#Creamos el decision tree solo con los indices de train
tree.carseats = tree(High~.-Sales, carseats, subset=train)
#visualizamos
plot(tree.carseats)
text(tree.carseats, pretty=0)
text(tree.carseats, pretty=0)
#Borramos los datos
rm(list=ls())
#Lectura de los datos
data(package="ISLR")
carseats<-Carseats
names(carseats)
#---- Pregunta 1: Previsualizacion de los datos ------#
hist(carseats$Sales)
#Clase de cada variable
sapply(carseats,class)
#---- Pregunta 2: Clssification decision tree ------#
High = ifelse(carseats$Sales<=8, "No", "Yes")
carseats = data.frame(carseats, High)
tree.carseats = tree(High~.-Sales, data=carseats)
summary(tree.carseats)
#---- Pregunta 3: Analisis grafico ------#
plot(tree.carseats)
text(tree.carseats, pretty = 0)
tree.carseats
#---- Pregunta 4 y 5: Estimaci?n con decision trees ------#
set.seed(101)
train=sample(1:nrow(carseats), 250)
tree.carseats = tree(High~.-Sales, carseats, subset=train)
plot(tree.carseats)
text(tree.carseats, pretty=0)
install.packages("installr")
library("installr")
updateR()
#-------------------------------- Load packages --------------------------------------------#
if (!require("Rcpp")){install.packages('Rcpp',repos='http://cran.us.r-project.org');library("Rcpp")}
if (!require("e1071")){install.packages('e1071');library("e1071")}
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("dplyr")){install.packages("dplyr",verbose = F) ; library("dplyr")}
if (!require("recipes")){install.packages("recipes",verbose = F) ; library("recipes")}
if (!require("caret")){install.packages("caret",quiet = T) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
#----- Corra estas lineas en una sola ejecucion -----#
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
a
library(rhdf5)
#----- Fin: Corra estas lineas en una sola ejecucion -----#
#----- Corra estas lineas en una sola ejecucion -----#
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
a
library(rhdf5)
## Mirrors: uncomment the following and change to your favorite CRAN mirror
## if you don't want to use the default (cran.rstudio.com).
## options("repos" = c(CRAN="https://cran.rstudio.com"))
## Mirrors: uncomment the following and change to your favorite Bioconductor
## mirror, if you don't want to use the default (bioconductor.org)
## options("BioC_mirror" = "https://bioconductor.org")
local({
vers <- getRversion()
if (vers >= "3.6"){
stop(
"With R version 3.5 or greater, install Bioconductor ",
"packages using BiocManager; see https://bioconductor.org/install",
call. = FALSE
)
}
biocVers <- tryCatch({
BiocInstaller::biocVersion() # recent BiocInstaller
}, error=function(...) {         # no / older BiocInstaller
BioC_version_associated_with_R_version <-
get(".BioC_version_associated_with_R_version",
envir=asNamespace("tools"), inherits=FALSE)
if (is.function(BioC_version_associated_with_R_version))
BioC_version_associated_with_R_version()
else                            # numeric_version
BioC_version_associated_with_R_version
})
if (vers < "3.0") {
## legacy; no need to change "3.0" ever
## coordinate this message with .onAttach
txt <- strwrap("A new version of Bioconductor is available
after installing the most recent version of R; see
http://bioconductor.org/install", exdent=2)
message(paste(txt, collapse="\n"))
} else if ("package:BiocInstaller" %in% search()) {
## messages even if already attached
tryCatch(BiocInstaller:::.onAttach(), error=function(...) NULL)
}
if (vers > "2.13" && biocVers > "2.8") {
if (exists("biocLite", .GlobalEnv, inherits=FALSE)) {
txt <- strwrap("There is an outdated biocLite() function in the
global environment; run 'rm(biocLite)' and try again.")
stop("\n", paste(txt, collapse="\n"))
}
if (!suppressWarnings(require("BiocInstaller", quietly=TRUE))) {
a <- NULL
p <- file.path(Sys.getenv("HOME"), ".R", "repositories")
if (file.exists(p)) {
a <- tools:::.read_repositories(p)
if (!"BioCsoft" %in% rownames(a))
a <- NULL
}
if (is.null(a)) {
p <- file.path(R.home("etc"), "repositories")
a <- tools:::.read_repositories(p)
}
if (!"package:utils" %in% search()) {
path <- "//bioconductor.org/biocLite.R"
txt <- sprintf("use 'source(\"https:%s\")' or
'source(\"http:%s\")' to update 'BiocInstaller' after
library(\"utils\")", path, path)
message(paste(strwrap(txt), collapse="\n  "))
} else {
if (vers >= "3.2.2" && vers < "3.3.0") {
## transitioning to https support; check availability
con <- file(fl <- tempfile(), "w")
sink(con, type="message")
tryCatch({
xx <- close(file("https://bioconductor.org"))
}, error=function(e) {
message(conditionMessage(e))
})
sink(type="message")
close(con)
if (!length(readLines(fl)))
a["BioCsoft", "URL"] <-
sub("^http:", "https:", a["BioCsoft", "URL"])
}
## add a conditional for Bioc releases occuring WITHIN
## a single R minor version. This is so that a user with a
## version of R (whose etc/repositories file references the
## no-longer-latest URL) and without BiocInstaller
## will be pointed to the most recent repository suitable
## for their version of R
if (vers >= "3.5.0") {
a["BioCsoft", "URL"] <- sub(as.character(biocVers), "3.7",
a["BioCsoft", "URL"])
} else if (vers >= "3.4.0") {
a["BioCsoft", "URL"] <- sub(as.character(biocVers), "3.6",
a["BioCsoft", "URL"])
} else if (vers >= "3.3.0") {
a["BioCsoft", "URL"] <- sub(as.character(biocVers), "3.4",
a["BioCsoft", "URL"])
} else if (vers >= "3.2") {
a["BioCsoft", "URL"] <- sub(as.character(biocVers), "3.2",
a["BioCsoft", "URL"])
} else if (vers == "3.1.1") {
## R-3.1.1's etc/repositories file at the time of the release
## of Bioc 3.0 pointed to the 2.14 repository, but we want
## new installations to access the 3.0 repository
a["BioCsoft", "URL"] <- sub(as.character(biocVers), "3.0",
a["BioCsoft", "URL"])
} else if (vers == "3.1.0") {
## R-devel points to 2.14 repository
a["BioCsoft", "URL"] <- sub(as.character(biocVers), "2.14",
a["BioCsoft", "URL"])
} else if (vers >= "2.15" && vers < "2.16") {
a["BioCsoft", "URL"] <- sub(as.character(biocVers), "2.11",
a["BioCsoft", "URL"])
biocVers <- numeric_version("2.11")
}
install.packages("BiocInstaller", repos=a["BioCsoft", "URL"])
if (!suppressWarnings(require("BiocInstaller",
quietly=TRUE))) {
path0 <- "//bioconductor.org/packages"
path <- sprintf("%s/%s/bioc", path0, as.character(biocVers))
txt0 <- "'biocLite.R' failed to install 'BiocInstaller',
use 'install.packages(\"BiocInstaller\",
repos=\"https:%s\")' or
'install.packages(\"BiocInstaller\", repos=\"http:%s\")'"
txt <- sprintf(txt0, path, path)
message(paste(strwrap(txt), collapse="\n  "))
}
}
} else {
## BiocInstaller version 1.16.0-1.18.1 do not
## automatically update when type=="source"; notify users
## when they have updated R over their old libraries
installerVersion <- utils::packageVersion("BiocInstaller")
test0 <- (vers > "3.1.2") &&
!identical(getOption("pkgType"), "source") &&
(installerVersion >= "1.16.0") &&
(installerVersion <= "1.16.4")
if (test0) {
if (installerVersion < "1.16.4") {
txt <- "Update BiocInstaller with
oldPkgType=options(pkgType=\"source\");
biocLite(\"BiocInstaller\"); options(oldPkgType)"
message(paste(strwrap(txt, exdent=2), collapse="\n"))
}
if (vers >= "3.2") {
path <- "//bioconductor.org/biocLite.R"
txt <- sprintf("BiocInstaller version %s is too old for
R version %s; remove.packages(\"BiocInstaller\"),
re-start R, then source(\"https:%s\") or
source(\"http:%s\")", biocVers, vers, path, path)
warning(paste(strwrap(txt, exdent=2), collapse="\n"))
}
}
}
} else {
tryCatch({
source("https://bioconductor.org/getBioC.R")
}, error=function(e) {
warning("https: failed (", conditionMessage(e), "), trying http",
immediate.=TRUE)
source("http://bioconductor.org/getBioC.R")
})
biocLite <<-
function(pkgs, groupName="lite", ...)
{
if (missing(pkgs))
biocinstall(groupName=groupName, ...)
else
biocinstall(pkgs=pkgs, groupName=groupName, ...)
}
}
})
BiocManager("rhdf5")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
library(rhdf5)
BiocManager(rhdf5)
library("rhdf5")
if (!require("Rcpp")){install.packages('Rcpp',repos='http://cran.us.r-project.org');library("Rcpp")}
if (!require("e1071")){install.packages('e1071');library("e1071")}
if (!require("grid")){install.packages("grid",verbose = F) ; library("grid")}
if (!require("stringi")){install.packages("stringi",verbose = F) ; library("stringi")}
if (!require("dplyr")){install.packages("dplyr",verbose = F) ; library("dplyr")}
if (!require("recipes")){install.packages("recipes",verbose = F) ; library("recipes")}
if (!require("caret")){install.packages("caret",quiet = T) ; library("caret")}
if (!require("RSNNS")){install.packages("RSNNS",verbose = F) ; library("RSNNS")}
if (!require("imager")){install.packages("imager",verbose = F) ; library("imager")}
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
