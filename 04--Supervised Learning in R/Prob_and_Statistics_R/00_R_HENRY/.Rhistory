cor(economics$pce,economics$psavert)*sd(economics$pce)^2
cor(economics$pce,economics$psavert)*(sd(economics$pce))^2
#Verificando que cov y cor*sd*sd son lo mismo
cov(economics$pce,economics$psavert)
cor(economics$pce,economics$psavert)*(sd(economics$pce))*sd(economics$pce)
cor(economics$pce,economics$psavert)*(sd(economics$pce))*sd(economics$psavert)
#Verificando que cov y cor*sd*sd son lo mismo
value1<-cov(economics$pce,economics$psavert)
value1
value2<-cor(economics$pce,economics$psavert)*(sd(economics$pce))*sd(economics$psavert)
value2
ejemploQQ<-data.frame(V1=c(3,11,16,19,20,21,22,23,24,24,24,25,26,27,28,29,29,30,30,31,32,34))
value1==value2
rm(list=ls())
t.test(tips$tip,alternative = "two.sided",mu=2.5)
#ejemplo
randT<-rt(30000,df=NROW(tips)-1)
randT
length(randT)
NROW(tips)-1
#hallamos el t-estadistico y otra informacion
tipTTest<-t.test(tips$tip,alternative = "two.sided",mu=2.5)
t.test(tips$tip,alternative = "greater",mu=2.5)
tipTTest
tipTTest
ggplot(data.frame(x=randT))+
geom_density(aes(x=x),fill="grey",color="grey") +
geom_vline(xintercept = tipTTest$statistic) +
geom_vline(xintercept = mean(randT) + c(-2,2)*sd(randT),linetype=2)
rm(list=ls())
t.test(tips$tip,alternative = "two.sided",mu=2.5)
#ejemplo
randT<-rt(30000,df=NROW(tips)-1)
#hallamos el t-estadistico y otra informacion
tipTTest<-t.test(tips$tip,alternative = "two.sided",mu=2.5)
#graficamos
ggplot(data.frame(x=randT))+
geom_density(aes(x=x),fill="grey",color="grey") +
geom_vline(xintercept = tipTTest$statistic) +
geom_vline(xintercept = mean(randT) + c(-2,2)*sd(randT),linetype=2)
t.test(tips$tip,alternative = "greater",mu=2.5)
aggregate(tip ~sex,data=tips,var)
tips$tip
#test de normalidad para la distribucion de tip
shapiro.test(tips$tip)
ggplot(tips,aes(x=tip,fill=sex)) +
geom_histogram(binwidth = 0.5,alpha=1/2)
#Usamos un test noparametrico
ansari.test(tip ~sex,tips)
t.test(tip~sex,data=tips,var.equal=T)
if(!require("plyr")){install.packages("plyr",quiet = T);library("plyr")}
rm(list=ls())
tipAnova<-aov(tip~day-1,tips)
tipIntercept<-aov(tip~day,tips)
tipAnova$coefficients
tipIntercept$coefficients
summary(tipAnova)
tipsByDay<-ddply(tips,"day",summarize,
tip.mean=mean(tip),tip.sd=sd(tips),
Length=NROW(tip),
tfrac=qt(p=0.90,df=Length-1),
Lower=tip.mean-tfrac*tip.sd/sqrt(Length),
Upper=tip.mean+tfrac*tip.sd/sqrt(Length)
)
tipsByDay<-ddply(tips,"day",summarize,
tip.mean=mean(tip),tip.sd=sd(tips),
Length=NROW(tip),
tfrac=qt(p=0.90,df=Length-1),
Lower=tip.mean-tfrac*tip.sd/sqrt(Length),
Upper=tip.mean+tfrac*tip.sd/sqrt(Length))
rm(list=ls())
tipAnova<-aov(tip~day-1,tips)
tipIntercept<-aov(tip~day,tips)
tipAnova$coefficients
tipIntercept$coefficients
summary(tipAnova)
tipsByDay<-ddply(tips,"day",summarize,
tip.mean=mean(tip),tip.sd=sd(tips),
Length=NROW(tip),
tfrac=qt(p=0.90,df=Length-1),
Lower=tip.mean-tfrac*tip.sd/sqrt(Length),
Upper=tip.mean+tfrac*tip.sd/sqrt(Length))
tipsByDay<-ddply(tips,"day",summarize,
tip.mean=mean(tip),tip.sd=sd(tip),
Length=NROW(tip),
tfrac=qt(p=0.90,df=Length-1),
Lower=tip.mean-tfrac*tip.sd/sqrt(Length),
Upper=tip.mean+tfrac*tip.sd/sqrt(Length))
tipsByDay
ggplot(tipsByDay,aes(x=tip.mean,y=day))+geom_point()+
geom_errorbarh(aes(xmin=Lower,xmax=Upper),height=0.3)
functions_to_load<-list.files("./Functions/",pattern = ".R",full.names = T)
sapply(functions_to_load,source)
rm(list=ls())
functions_to_load<-list.files("./Functions/",pattern = ".R",full.names = T)
sapply(functions_to_load,source)
ggplot(rnorm(300)) + geom_histogram()
my_data<-data.frame(x=rnorm(300,10,12))
ggplot(my_data,aes(data$x)) + geom_histogram()
my_data<-data.frame(x=rnorm(300,10,12))
ggplot(data=my_data,aes(data$x)) + geom_histogram()
ggplot(data=my_data) + geom_histogram()
plot_ly(ggplot2::diamonds, y = ~price, color = ~cut, type = "box")
diamonds
plot_ly(x = rnorm(300,10,12), type = "histogram")
plot_ly(x = rnorm(300,10,12), type = "histogram") %>%
add_segments(x = 0, xend = 4, y = 0, yend = 10)
plot_ly(x = rnorm(300,10,12), type = "histogram") %>%
add_segments(x = 0, xend = 0, y = 0, yend = 30)
x<-data.frame(x=rnorm(300,10,12))
plot_ly(x =x, type = "histogram") %>%
add_segments(x = 0, xend = 0, y = 0, yend = 30)
x<-data.frame(x=rnorm(300,10,12))
plot_ly(x =x, type = "histogram")
x<-rnorm(300,10,12)
plot_ly(x =x, type = "histogram") %>%
add_segments(x = 0, xend = 0, y = 0, yend = 30)
5^(1/3)
5^(1/3)
qqplot
qqnorm
?qqnorm
ejemploQQ<-data.frame(V1=c(3,11,16,19,20,21,22,23,24,24,24,25,26,27,28,29,29,30,30,31,32,34))
ejemploQQ$V1 <- sort(ejemploQQ$V1)
n <- length(ejemploQQ$V1)
a <- 1/2
ejemploQQ$pi <- (1:n-a)/(n)
ejemploQQ$phiInv <- qnorm(ejemploQQ$pi)
par(mfrow=c(1,2))
plot(ejemploQQ$phiInv,ejemploQQ$V1,
xlab="Cuantiles Normal Est\u00e1ndar",
ylab="Datos ordenados", main="Ejemplo (a mano)")
qqnorm(ejemploQQ$V1,main ="Usando la funci\u00f3n qqnorm")
x<-qqnorm(ejemploQQ$V1,main ="Usando la funci\u00f3n qqnorm")
x$x
qqplot(ejemploQQ$V1,ejemploQQ$V1)
qqplot(rnorm(10,0,1),rnorm(20,2,3))
qqplot(rnorm(10,0,1),rnorm(20,2,3))
qqplot(rnorm(1000,0,1),rnorm(2000,2,3))
qqplot(rnorm(24,0,1),rnorm(42,2,3))
qqplot(rnorm(24,0,1),rnorm(42,2,3))
qqplot(rnorm(24,0,1),rnorm(42,2,3))
qqplot(rnorm(24,0,1),rnorm(42,2,3))
qqplot(rnorm(24,0,1),rnorm(42,2,3))
qqplot(rnorm(24,0,1),rnorm(42,2,3))
qqplot(ejemploQQ$V1,rnorm(42,2,3))
qqplot(ejemploQQ$V1,rnorm(42,2,3))
qqnorm(ejemploQQ$V1,main ="Usando la funci\u00f3n qqnorm")
qqnorm(ejemploQQ$V1,main ="Usando la funci\u00f3n qqnorm")
qqplot(rnorm(24,0,1),rnorm(42,0,1))
qqplot(ejemploQQ$V1,rnorm(42,0,1))
len(ejemploQQ$V1)
length(ejemploQQ$V1)
qqplot(ejemploQQ$V1,rnorm(22,0,1))
par(mfrow=c(1,2))
plot(ejemploQQ$phiInv,ejemploQQ$V1,
xlab="Cuantiles Normal Est\u00e1ndar",
ylab="Datos ordenados", main="Ejemplo (a mano)")
qqplot(ejemploQQ$V1,rnorm(22,0,1))
#Dataset precargado en ggplot2
economics<-data.frame(economics)
#Dataset precargado en ggplot2
economics<-data.frame(economics)
head(economics)
#Relacion entre personal consumption (pce) y personal saving rate (psavert)
cor(economics$pce,economics$psavert)
rm(list = ls())
Nest<-rnorm(5000,mean=0,sd=1)
muestra1<-sample(Nest, size=50)
muestra2<-sample(Nest,size=50)
#Media y varianza
Intervalo.Confianza.media(muestra1,alpha=0.05, sigma.conocido=T, sigma=1)
Intervalo.Confianza.var(muestra1,alpha=0.05)
#Diferencia de medias
muestrax<-rnorm(500,mean=0,sd=2)
muestray<-rnorm(280,mean=0.3,sd=2.5)
Intervalo.Confianza.difmedia(muestrax,muestray,0.05,sigmas.conocidos=T, sigmas.iguales=T, 2,2.5)
Intervalo.Confianza.convar(muestrax,muestray,0.05)
rm(list = ls())
functions_to_load<-list.files("./Functions/",pattern = ".R",full.names = T)
sapply(functions_to_load,source)
Nest<-rnorm(5000,mean=0,sd=1)
muestra1<-sample(Nest, size=50)
muestra2<-sample(Nest,size=50)
#Media y varianza
Intervalo.Confianza.media(muestra1,alpha=0.05, sigma.conocido=T, sigma=1)
Intervalo.Confianza.var(muestra1,alpha=0.05)
#Diferencia de medias
muestrax<-rnorm(500,mean=0,sd=2)
muestray<-rnorm(280,mean=0.3,sd=2.5)
Intervalo.Confianza.difmedia(muestrax,muestray,0.05,sigmas.conocidos=T, sigmas.iguales=T, 2,2.5)
Intervalo.Confianza.convar(muestrax,muestray,0.05)
NN=1e6
poblacion=rnorm(NN,108,5)
nn=250 #tamano muestral
muestra=sample(poblacion,nn) #muestreo simple
mean(muestra) #media muestral de la altura
mean(muestra<100) #proporcion muestral de ninos con un altura inferior a 1 metro
########### Distribución de la media muestral
K=1000 #Número de muestras
medias=replicate(K,mean(sample(poblacion,nn)))
#La linea anterior es esquivalente a
medias<-c()
for(i in 1:K){
medias[i]<-mean(sample(poblacion,nn))
}
qplot(medias,ylab="frecuencia",xlab="Media muestral")
########### Estimacion por intervalos
t.test(muestra) #intervalo de confianza
t.test((muestra<100)) #intervalo de confianza para la proporcion
qnorm(1-0.05/2,0,1)
0.90/2
0.10/2
qnorm(0.90)
qnorm(0.95)
1+1
1+1
qnorm(0.95)
qnorm(0.05)
e=.5 #margen de error
alfa=.05 # (1-alfa) es el nivel de confianza
sigma=6 # acotamos la desviación tipica
z=qnorm(1-alfa/2) #cuantil de la normal
nn=ceiling(z^2/e^2*sigma^2) #tamaño muestral requerido
muestra1=sample(poblacion,nn) #muestreo simple
intervalo=t.test(muestra1)$conf.int
intervalo
diff(intervalo)/2 #semi-longitud del intervalo: margen de error
rm(list=ls())
t.test(tips$tip,alternative = "two.sided",mu=2.5)
#ejemplo
randT<-rt(30000,df=NROW(tips)-1)
#hallamos el t-estadistico y otra informacion
tipTTest<-t.test(tips$tip,alternative = "two.sided",mu=2.5)
#graficamos
ggplot(data.frame(x=randT))+
geom_density(aes(x=x),fill="grey",color="grey") +
geom_vline(xintercept = tipTTest$statistic) +
geom_vline(xintercept = mean(randT) + c(-2,2)*sd(randT),linetype=2)
t.test(tips$tip,alternative = "greater",mu=2.5)
rm(list=ls())
tipAnova<-aov(tip~day-1,tips)
tipIntercept<-aov(tip~day,tips)
tipAnova$coefficients
tipIntercept$coefficients
summary(tipAnova)
tipsByDay<-ddply(tips,"day",summarize,
tip.mean=mean(tip),tip.sd=sd(tip),
Length=NROW(tip),
tfrac=qt(p=0.90,df=Length-1),
Lower=tip.mean-tfrac*tip.sd/sqrt(Length),
Upper=tip.mean+tfrac*tip.sd/sqrt(Length))
ggplot(tipsByDay,aes(x=tip.mean,y=day))+geom_point()+
geom_errorbarh(aes(xmin=Lower,xmax=Upper),height=0.3)
e=.5 #margen de error
alfa=.05 # (1-alfa) es el nivel de confianza
rm(list=ls())
x <- rnorm(300,0,10)
x
mean(x)
var(x)
x <- rnorm(300,0,1)
mean(x)
var(x)
x <- rnorm(300,0,1)
mean(x)
var(x)
x <- rnorm(300,0,1)
x <- rnorm(300,0,1)
mean(x)
x <- rnorm(300,0,1); mean(x); var(x)
x <- rnorm(300,0,1); mean(x); var(x)
x <- rnorm(300,0,1); mean(x); var(x)
x <- rnorm(300,0,1); mean(x); var(x)
x <- rnorm(3000,0,1); mean(x); var(x)
x <- rnorm(3000,0,1); mean(x); var(x)
x <- rnorm(3000,0,1); mean(x); var(x)
x <- rnorm(3000,0,1); mean(x); var(x)
x <- rnorm(30,0,1); mean(x); var(x)
x <- rnorm(30,0,1); mean(x); var(x)
x <- rnorm(30,0,1); mean(x); var(x)
x <- rnorm(30,0,1); mean(x); var(x)
x <- rnorm(30,0,1); mean(x); var(x)
x <- rnorm(30,0,1); mean(x); var(x)
x <- rnorm(30,0,1); mean(x); var(x)
x <- rnorm(300,0,1); mean(x); var(x)
x <- rnorm(300,0,1); mean(x); var(x)
x <- rnorm(300,0,1); mean(x); var(x)
x <- rnorm(300,0,1); mean(x); var(x)
x <- rnorm(300,0,1); mean(x); var(x)
x <- rnorm(3000,0,1); mean(x); var(x)
x <- rnorm(3000,0,1); mean(x); var(x)
x <- rnorm(3000,0,1); mean(x); var(x)
x <- rnorm(3000,0,1); mean(x); var(x)
x <- rnorm(300000,0,1); mean(x); var(x)
x <- rnorm(300000,0,1); mean(x); var(x)
x <- rnorm(300000,0,1); mean(x); var(x)
x <- rnorm(300000,0,1); mean(x); var(x)
x <- rnorm(300000,0,1); mean(x); var(x)
x <- rnorm(300000,0,1); mean(x); var(x)
getmode <- function(v) {
valores <- unique(v)
valores(which.max(tabulate(match(v,valores))))
}
v <- c(2,1,1,1,1,1,2,3,2,3,2,3,2,1,1,1,2,3,4,5,5,4,3,2,1,3,2,3,1,4,2,1)
getmode(v)
getmode <- function(v) {
valores <- unique(v)
valores[which.max(tabulate(match(v,valores)))]
}
v <- c(2,1,1,1,1,1,2,3,2,3,2,3,2,1,1,1,2,3,4,5,5,4,3,2,1,3,2,3,1,4,2,1)
getmode(v)
table(v)
max(table(v))
which.max(table(v))
DescTools::Mode(v)
install.packages(DescTools)
install.packages("DescTools")
aaa1 <- DescTools::Mode(v)
sample(aaa1)
sample(aaa1)
sample(aaa1)
sample(aaa1)
hist(v)
hist(x)
hist(x, prob=TRUE)
lines(density(x), col="red",lwd=2)
plot_ly(x=x, type="histogram")
x <- rnorm(3000,0,1)
hist(x, prob=TRUE)
lines(density(x), col="red",lwd=2)
plot_ly(x=x, type="histogram")
boxplot(data,frame(x,y))
y=rnotm(lenght(x),1)
boxplot(data,frame(x,y))
boxplot(data.frame(x,y))
y <- rnotm(lenght(x),1)
y <- rnorm(lenght(x),1)
y <- rnorm(length(x),1)
boxplot(data.frame(x,y))
?diamonds
head(diamonds)
dbinom(2,size=10,prob=0.2) #Probabilidad que una binomial(10,0.2) tome el valor 2 es,
pbinom(2,size=10,prob=0.2) #Probabilidad que una binomial(10,0.2) tome un valor inferior a 2
qbinom(0.9,size=10,prob=0.2) # que valor de una binomial(10,0.2) presenta una probabilidad acumulada de 0.9 ?
rbinom(20,size=10,prob=0.2) # generar 20 valores aleatorios de una distribuci?n binomial(10,0.2)
dnorm(x, mean=0, sd=1) #d: densidad
pnorm(0.1, mean=0, sd=1) #p: distribucion
qnorm(0.11, mean=0, sd=1) #q: quantile, que valor de una N(0,1) presenta una probabilidad acumulada de 0.11
rnorm(1000, mean=0, sd=1) #r: random values de tamano n media mean y desviacion sd
#-- Graficas Discretas
par(mfrow=c(1,2))
x<-c(0,1:10)
plot(x,pbinom(x,size=10,prob=0.5),type='s',main="Funci\u00f3n de Distribuci\u00f3n Binomial", xlab="k", ylab="P(X<=k)")
plot(x,dbinom(x,size=10,prob=0.5),type='h',main="Funci\u00f3n de Probabilidad Binomial", xlab="k", ylab="P(X=k)")
plot(x,pbinom(x,size=10,prob=0.5),type='s',main="Funci\u00f3n de Distribuci\u00f3n Binomial", xlab="k", ylab="P(X<=k)")
plot(x,dbinom(x,size=10,prob=0.5),type='h',main="Funci\u00f3n de Probabilidad Binomial", xlab="k", ylab="P(X=k)")
plot(x,pbinom(x,size=10,prob=0.5),type='s',main="Funci\u00f3n de Distribuci\u00f3n Binomial", xlab="k", ylab="P(X<=k)")
plot(x,dbinom(x,size=10,prob=0.5),type='h',main="Funci\u00f3n de Probabilidad Binomial", xlab="k", ylab="P(X=k)")
plot(x,pbinom(x,size=10,prob=0.5),type='s',main="Funci\u00f3n de Distribuci\u00f3n Binomial", xlab="k", ylab="P(X<=k)")
plot(x,dbinom(x,size=10,prob=0.5),type='h',main="Funci\u00f3n de Probabilidad Binomial", xlab="k", ylab="P(X=k)")
plot(x,dnorm(x,mean=0,sd=1),type='l',main="Funci\u00f3n de densidad normal",xlab="x", ylab="f(x)",col="blue",lwd=2)
plot(x,pnorm(x,mean=0,sd=1),type='l',main="Funci\u00f3n de distribuci\u00f3n normal",xlab="x", ylab="F(x)",col="blue",lwd=2)
#-- Graficas Continuas
par(mfrow=c(1,2))
#-- Graficas Continuas
par(mfrow=c(1,2))
x<-seq(-5,5,by=0.1)
plot(x,dnorm(x,mean=0,sd=1),type='l',main="Funci\u00f3n de densidad normal",xlab="x", ylab="f(x)",col="blue",lwd=2)
plot(x,pnorm(x,mean=0,sd=1),type='l',main="Funci\u00f3n de distribuci\u00f3n normal",xlab="x", ylab="F(x)",col="blue",lwd=2)
#Dataset precargado en ggplot2
economics<-data.frame(economics)
head(economics)
#Relacion entre personal consumption (pce) y personal saving rate (psavert)
cor(economics$pce,economics$psavert)
cov(economics$pce,economics$psavert)
xPart<-economics$pce-mean(economics$pce)
yPart<-economics$psavert-mean(economics$psavert)
nMinusOne <- nrow(economics)-1
xSD<-sd(economics$pce)
ySD<-sd(economics$psavert)
sum(xPart*yPart) / (nMinusOne*xSD*ySD)
#Para una matriz
cor(economics[,c(2,4:6)])
economics
#Dataset precargado en ggplot2
economics<-data.frame(economics)
head(economics)
#Relacion entre personal consumption (pce) y personal saving rate (psavert)
cor(economics$pce,economics$psavert)
cov(economics$pce,economics$psavert)
plot(economics$pce,economics$psavert)
?economics
#Matriz de correlacion grafica
econCor<-cor(economics[,c(2,4:6)])
#Para una matriz
cor(economics[,c(2,4:6)])
#plot con informacion relevante
ggpairs(economics[,c(2,4:6)])
#Matriz de correlacion grafica
econCor<-cor(economics[,c(2,4:6)])
econMelt<-melt(econCor,varnames = c("x","y"),
value.name = "Correlation")
econMelt
#corplot
ggplot(econMelt,aes(x=x,y=y)) + #inicializa el plot
geom_tile(aes(fill=Correlation))+ # Dibujar mosaicos rellenando el color en base a la correlación.
scale_fill_gradient2(low=muted("red"),mid="white",
high = "steelblue",
guide=guide_colorbar(ticks = F,barheight = 10),
limits=c(-1,1)) + #escala de colores, entre -1 y 1 desde rojo hasta azul
theme_minimal() + #usa el theme minimo para que no haya extras en el plot
labs(x=NULL,y=NULL) #no coloques valores de xlab ni ylab
#corplot
ggplot(econMelt,aes(x=x,y=y)) + #inicializa el plot
geom_tile(aes(fill=Correlation))+ # Dibujar mosaicos rellenando el color en base a la correlación.
scale_fill_gradient2(low=muted("red"),mid="white",
high = "steelblue",
guide=guide_colorbar(ticks = F,barheight = 10),
limits=c(-1,1)) + #escala de colores, entre -1 y 1 desde rojo hasta azul
theme_minimal() + #usa el theme minimo para que no haya extras en el plot
labs(x=NULL,y=NULL) #no coloques valores de xlab ni ylab
#que ocurre si tengo variables discretas?
data(tips)
head(tips)
ggpairs(tips)
cor(tips)
head(tips)
cor(tips[:,(1,2)])
cor(tips[,(1,2)])
cor(tips[,c(1,2)])
#"Correlation doesn't mean Causation"
getXKCD(which="552")
getXKCD(which="554")
muestra1<-sample(Nest, size=50)
muestra2<-sample(Nest,size=50)
Nest<-rnorm(5000,mean=0,sd=1)
muestra1<-sample(Nest, size=50)
muestra2<-sample(Nest,size=50)
#Media y varianza
Intervalo.Confianza.media(muestra1,alpha=0.05, sigma.conocido=T, sigma=1)
Intervalo.Confianza.var(muestra1,alpha=0.05)
functions_to_load<-list.files("./Functions/",pattern = ".R",full.names = T)
sapply(functions_to_load,source)
Intervalo.Confianza.difmedia(muestrax,muestray,0.05,sigmas.conocidos=T, sigmas.iguales=T, 2,2.5)
#Media y varianza
Intervalo.Confianza.media(muestra1,alpha=0.05, sigma.conocido=T, sigma=1)
Intervalo.Confianza.var(muestra1,alpha=0.05)
muestra=sample(poblacion,nn) #muestreo simple
mean(muestra) #media muestral de la altura
mean(muestra<100) #proporcion muestral de ninos con un altura inferior a 1 metro
poblacion=rnorm(NN,108,5)
nn=250 #tamano muestral
muestra=sample(poblacion,nn) #muestreo simple
mean(muestra) #media muestral de la altura
mean(muestra<100) #proporcion muestral de ninos con un altura inferior a 1 metro
muestra=sample(poblacion,nn) #muestreo simple
poblacion=rnorm(NN,108,5)
NN=1e6
poblacion=rnorm(NN,108,5)
muestra=sample(poblacion,nn) #muestreo simple
mean(muestra) #media muestral de la altura
mean(muestra<100) #proporcion muestral de ninos con un altura inferior a 1 metro
medias=replicate(K,mean(sample(poblacion,nn)))
########### Distribución de la media muestral
K=1000 #Número de muestras
medias=replicate(K,mean(sample(poblacion,nn)))
#ejemplo
randT<-rt(30000,df=NROW(tips)-1)
#hallamos el t-estadistico y otra informacion
tipTTest<-t.test(tips$tip,alternative = "two.sided",mu=2.5)
tipTTest
#graficamos
ggplot(data.frame(x=randT))+
geom_density(aes(x=x),fill="grey",color="grey") +
geom_vline(xintercept = tipTTest$statistic) +
geom_vline(xintercept = mean(randT) + c(-2,2)*sd(randT),linetype=2)
t.test(tips$tip,alternative = "greater",mu=2.5)
tipsByDay
tipsByDay<-ddply(tips,"day",summarize,
tip.mean=mean(tip),tip.sd=sd(tip),
Length=NROW(tip),
tfrac=qt(p=0.90,df=Length-1),
Lower=tip.mean-tfrac*tip.sd/sqrt(Length),
Upper=tip.mean+tfrac*tip.sd/sqrt(Length))
tipsByDay
rm(list=ls())
x=c(.99,1.02,1.15,1.29,1.46,1.36,0.87,1.23,1.55,1.4,1.19,1.15,.98,1.01,1.11,1.2,1.26,1.32,1.43,.95)
y=c(90.01,89.05,91.43,93.74,96.73,94.45,87.59,91.77,99.42,93.65,93.54,92.52,90.56,89.54,89.85,90.39,93.25,93.41,94.98,87.33)
plot(x,y,pch=3,xlab="HC Level", ylab="O Purity",col="red")
model=lm(y~x)
model
model
summary(model)
plot(fitted.values(model),residuals(model),col="red",pch=3)
qqnorm(residuals(model),col="red",pch=3)
qqline(residuals(model))
plot(fitted.values(model),residuals(model),col="red",pch=3)
rm(list=ls())
x=c(.99,1.02,1.15,1.29,1.46,1.36,0.87,1.23,1.55,1.4,1.19,1.15,.98,1.01,1.11,1.2,1.26,1.32,1.43,.95)
y=c(90.01,89.05,91.43,93.74,96.73,94.45,87.59,91.77,99.42,93.65,93.54,92.52,90.56,89.54,89.85,90.39,93.25,93.41,94.98,87.33)
plot(x,y,pch=3,xlab="HC Level", ylab="O Purity",col="red")
model=lm(y~x)
model
# Plot of the regression line
plot(x,y,pch=3,xlab="HC Level", ylab="O Purity",col="red")
abline(model)
plot(fitted.values(model),residuals(model),col="red",pch=3)
qqnorm(residuals(model),col="red",pch=3)
qqline(residuals(model))
hist(y,prob=T)
lines(density(y))
