dbinom(2,size=10,prob=0.2) #Probabilidad que una binomial(10,0.2) tome el valor 2 es,
pbinom(2,size=10,prob=0.2) #Probabilidad que una binomial(10,0.2) tome un valor inferior a 2
qbinom(0.9,size=10,prob=0.2) # que valor de una binomial(10,0.2) presenta una probabilidad acumulada de 0.9 ?
rbinom(2000,size=10,prob=0.2) # generar 20 valores aleatorios de una distribuci?n binomial(10,0.2)
dnorm(x, mean=0, sd=1) #d: densidad
x
x
dnorm(x, mean=0, sd=1) #d: densidad
pnorm(0.1, mean=0, sd=1) #p: distribucion
rnorm(1000, mean=0, sd=1) #r: random values de tamano n media mean y desviacion sd
#-- Graficas Discretas
par(mfrow=c(1,2))
x<-c(0,1:10)
plot(x,dbinom(x,size=10,prob=0.5),type='h',main="Funci\u00f3n de Probabilidad Binomial", xlab="k", ylab="P(X=k)")
plot(x,pbinom(x,size=10,prob=0.5),type='s',main="Funci\u00f3n de Distribuci\u00f3n Binomial", xlab="k", ylab="P(X<=k)")
#-- Graficas Continuas
par(mfrow=c(1,2))
x<-seq(-5,5,by=0.1)
plot(x,dnorm(x,mean=0,sd=1),type='l',main="Funci\u00f3n de densidad normal",xlab="x", ylab="f(x)",col="blue",lwd=2)
plot(x,pnorm(x,mean=0,sd=1),type='l',main="Funci\u00f3n de distribuci\u00f3n normal",xlab="x", ylab="F(x)",col="blue",lwd=2)
rm(list = ls())
#Dataset precargado en ggplot2
economics<-data.frame(economics)
head(economics)
?economics
#Relacion entre personal consumption (pce) y personal saving rate (psavert)
cor(economics$pce,economics$psavert)
cov(economics$pce,economics$psavert)
xPart<-economics$pce-mean(economics$pce)
yPart<-economics$psavert-mean(economics$psavert)
nMinusOne <- nrow(economics)-1
xSD<-sd(economics$pce)
ySD<-sd(economics$psavert)
sum(xPart*yPart) / (nMinusOne*xSD*ySD)
#Para una matriz
cor(economics[,c(2,4:6)])
#plot con informacion relevante
ggpairs(economics[,c(2,4:6)])
#Matriz de correlacion grafica
econCor<-cor(economics[,c(2,4:6)])
econMelt<-melt(econCor,varnames = c("x","y"),
value.name = "Correlation")
econMelt
#corplot
ggplot(econMelt,aes(x=x,y=y)) + #inicializa el plot
geom_tile(aes(fill=Correlation))+ # Dibujar mosaicos rellenando el color en base a la correlación.
scale_fill_gradient2(low=muted("red"),mid="white",
high = "steelblue",
guide=guide_colorbar(ticks = F,barheight = 10),
limits=c(-1,1)) + #escala de colores, entre -1 y 1 desde rojo hasta azul
theme_minimal() + #usa el theme minimo para que no haya extras en el plot
labs(x=NULL,y=NULL) #no coloques valores de xlab ni ylab
guide_colorbar(ticks = F,barheight = 10)
q<-guide_colorbar(ticks = F,barheight = 10)
q$title
#corplot
ggplot(econMelt,aes(x=x,y=y)) + #inicializa el plot
geom_tile(aes(fill=Correlation))+ # Dibujar mosaicos rellenando el color en base a la correlación.
scale_fill_gradient2(low=muted("red"),mid="white",
high = "steelblue",
limits=c(-1,1)) + #escala de colores, entre -1 y 1 desde rojo hasta azul
theme_minimal() + #usa el theme minimo para que no haya extras en el plot
labs(x=NULL,y=NULL) #no coloques valores de xlab ni ylab
#corplot
ggplot(econMelt,aes(x=x,y=y)) + #inicializa el plot
geom_tile(aes(fill=Correlation))+ # Dibujar mosaicos rellenando el color en base a la correlación.
scale_fill_gradient2(low=muted("red"),mid="white",
high = "steelblue",
limits=c(-1,1)) + #escala de colores, entre -1 y 1 desde rojo hasta azul#usa el theme minimo para que no haya extras en el plot
labs(x=NULL,y=NULL) #no coloques valores de xlab ni ylab
#corplot
ggplot(econMelt,aes(x=x,y=y)) + #inicializa el plot
geom_tile(aes(fill=Correlation))+ # Dibujar mosaicos rellenando el color en base a la correlación.
scale_fill_gradient2(low=muted("red"),mid="white",
high = "steelblue",
limits=c(-1,1)) + #escala de colores, entre -1 y 1 desde rojo hasta azul
theme_minimal() + #usa el theme minimo para que no haya extras en el plot
labs(x=NULL,y=NULL) #no coloques valores de xlab ni ylab
#que ocurre si tengo variables discretas?
data(tips)
head(tips)
ggpairs(tips)
#"Correlation doesn't mean Causation"
getXKCD(which="552")
#Covarianza
cov(economics$pce,economics$psavert)
#"Correlation doesn't mean Causation"
getXKCD(which="552")
#Covarianza
cov(economics$pce,economics$psavert)
cov(economics[,c(2,4:6)])
#Verificando que cov y cor*sd*sd son lo mismo
value1<-cov(economics$pce,economics$psavert)
value1
value2<-cor(economics$pce,economics$psavert)*(sd(economics$pce))*sd(economics$psavert)
value2
value1==value2
ejemploQQ<-data.frame(V1=c(3,11,16,19,20,21,22,23,24,24,24,25,26,27,28,29,29,30,30,31,32,34))
ejemploQQ$V1 <- sort(ejemploQQ$V1)
n <- length(ejemploQQ$V1)
a <- 1/2
ejemploQQ$pi <- (1:n-a)/(n)
ejemploQQ$phiInv <- qnorm(ejemploQQ$pi)
par(mfrow=c(1,2))
plot(ejemploQQ$phiInv,ejemploQQ$V1,
xlab="Cuantiles Normal Est\u00e1ndar",
ylab="Datos ordenados", main="Ejemplo (a mano)")
qqnorm(ejemploQQ$V1,main ="Usando la funci\u00f3n qqnorm")
ejemploQQ$pi
ejemploQQ<-data.frame(V1=c(3,11,16,19,20,21,22,23,24,24,24,25,26,27,28,29,29,30,30,31,32,34))
ejemploQQ$V1 <- sort(ejemploQQ$V1)
n <- length(ejemploQQ$V1)
a <- 1/2
1:n-a
1:(n-a)
1:n
1:n-a
n
ejemploQQ<-data.frame(V1=c(3,11,16,19,20,21,22,23,24,24,24,25,26,27,28,29,29,30,30,31,32,34))
ejemploQQ$V1 <- sort(ejemploQQ$V1)
n <- length(ejemploQQ$V1)
a <- 1/2
ejemploQQ$pi <- (1:n-a)/(n)
ejemploQQ$phiInv <- qnorm(ejemploQQ$pi)
par(mfrow=c(1,2))
ejemploQQ<-data.frame(V1=c(3,11,16,19,20,21,22,23,24,24,24,25,26,27,28,29,29,30,30,31,32,34))
ejemploQQ$V1 <- sort(ejemploQQ$V1)
n <- length(ejemploQQ$V1)
a <- 1/2
ejemploQQ<-data.frame(V1=c(3,11,16,19,20,21,22,23,24,24,24,25,26,27,28,29,29,30,30,31,32,34))
ejemploQQ$V1 <- sort(ejemploQQ$V1)
n <- length(ejemploQQ$V1)
a <- 1/2
ejemploQQ$pi <- (1:n-a)/(n+1-2*a)
ejemploQQ$phiInv <- qnorm(ejemploQQ$pi)
par(mfrow=c(1,2))
plot(ejemploQQ$phiInv,ejemploQQ$V1,
xlab="Cuantiles Normal Est\u00e1ndar",
ylab="Datos ordenados", main="Ejemplo (a mano)")
qqnorm(ejemploQQ$V1,main ="Usando la funci\u00f3n qqnorm")
ejemploQQ$pi <- (1:n-a)/(n)
# ejemploQQ$pi <- (1:n-a)/(n+1-2*a)
ejemploQQ$phiInv <- qnorm(ejemploQQ$pi)
ejemploQQ$phiInv
rm(list = ls())
ejemploQQ<-data.frame(V1=c(3,11,16,19,20,21,22,23,24,24,24,25,26,27,28,29,29,30,30,31,32,34))
ejemploQQ$V1 <- sort(ejemploQQ$V1)
n <- length(ejemploQQ$V1)
a <- 1/2
ejemploQQ$pi <- (1:n-a)/(n)
# ejemploQQ$pi <- (1:n-a)/(n+1-2*a)
ejemploQQ$phiInv <- qnorm(ejemploQQ$pi)
par(mfrow=c(1,2))
plot(ejemploQQ$phiInv,ejemploQQ$V1,
xlab="Cuantiles Normal Est\u00e1ndar",
ylab="Datos ordenados", main="Ejemplo (a mano)")
lines(-10:10,-10:10)
plot(ejemploQQ$phiInv,ejemploQQ$V1,
xlab="Cuantiles Normal Est\u00e1ndar",
ylab="Datos ordenados", main="Ejemplo (a mano)")
lines(-10:10,-10:10)
qqnorm(ejemploQQ$V1,main ="Usando la funci\u00f3n qqnorm")
qqnorm(ejemploQQ$V1,main ="Usando la funci\u00f3n qqnorm")
qqline(ejemploQQ$V1)
rm(list = ls())
functions_to_load<-list.files("./Functions/",pattern = ".R",full.names = T)
sapply(functions_to_load,source)
Nest<-rnorm(5000,mean=0,sd=1)
muestra1<-sample(Nest, size=50)
muestra2<-sample(Nest,size=50)
#Media y varianza
Intervalo.Confianza.media(muestra1,alpha=0.05, sigma.conocido=T, sigma=1)
Intervalo.Confianza.var(muestra1,alpha=0.05)
#Diferencia de medias
muestrax<-rnorm(500,mean=0,sd=2)
muestray<-rnorm(280,mean=0.3,sd=2.5)
Intervalo.Confianza.difmedia(muestrax,muestray,0.05,sigmas.conocidos=T, sigmas.iguales=T, 2,2.5)
Intervalo.Confianza.convar(muestrax,muestray,0.05)
rm(list=ls())
NN=1e6
poblacion=rnorm(NN,108,5)
nn=250 #tamano muestral
muestra=sample(poblacion,nn) #muestreo simple
mean(muestra) #media muestral de la altura
mean(muestra<100) #proporcion muestral de ninos con un altura inferior a 1 metro
########### Distribución de la media muestral
K=1000 #Número de muestras
medias=replicate(K,mean(sample(poblacion,nn)))
#La linea anterior es esquivalente a
medias<-c()
for(i in 1:K){
medias[i]<-mean(sample(poblacion,nn))
}
qplot(medias,ylab="frecuencia",xlab="Media muestral")
########### Estimacion por intervalos
t.test(muestra) #intervalo de confianza
t.test((muestra<100)) #intervalo de confianza para la proporcion
#Haciendo uso de la distribucion t-studendt
t.test(muestra) #intervalo de confianza
t.test((muestra<100)) #intervalo de confianza para la proporcion
rm(list=ls())
t.test(tips$tip,alternative = "two.sided",mu=2.5)
t.test(tips$tip,alternative = "two.sided",mu=3)
t.test(tips$tip,alternative = "two.sided",mu=2.5)
#ejemplo
randT<-rt(30000,df=NROW(tips)-1)
#hallamos el t-estadistico y otra informacion
tipTTest<-t.test(tips$tip,alternative = "two.sided",mu=2.5)
#graficamos
ggplot(data.frame(x=randT))+
geom_density(aes(x=x),fill="grey",color="grey") +
geom_vline(xintercept = tipTTest$statistic) +
geom_vline(xintercept = mean(randT) + c(-2,2)*sd(randT),linetype=2)
tipTTest$statistic
t.test(tips$tip,alternative = "two.sided",mu=2.5)
#Probamos si la media es mayor que 2.5
t.test(tips$tip,alternative = "greater",mu=2.5)
rm(list=ls())
rm(list=ls())
aggregate(tip ~sex,data=tips,var)
#test de normalidad para la distribucion de tip
shapiro.test(tips$tip)
rm(list=ls())
aggregate(tip ~sex,data=tips,var)
#test de normalidad para la distribucion de tip
# Se plantea como hipótesis nula que una muestra x1, ..., xn proviene de una
# población normalmente distribuida.
shapiro.test(tips$tip)
#test de normalidad para la distribucion de tip
# Se plantea como hipótesis nula que una muestra x1, ..., xn proviene de una
# población normalmente distribuida.
shapiro.test(tips$tip)
#para chicas
shapiro.test(tips$tip[which(tips$sex=="Female")])
#para chicos
shapiro.test(tips$tip[which(tips$sex=="Male")])
ggplot(tips,aes(x=tip,fill=sex)) +
geom_histogram(binwidth = 0.5,alpha=1/2)
#para chicas
shapiro.test(tips$tip[which(tips$sex=="Female")]) #p-valor > 0.05
#para chicos
shapiro.test(tips$tip[which(tips$sex=="Male")]) #p-valor >0.05
ggplot(tips,aes(x=tip,fill=sex)) +
geom_histogram(binwidth = 0.5,alpha=1/2)
#Usamos un test noparametrico
ansari.test(tip ~sex,tips)
?var.test
var.test(tips$tip[which(tips$sex=="Male")],tips$tip[which(tips$sex=="Female")])
#Usamos un test noparametrico
ansari.test(tip ~sex,tips) #
#Usamos un test noparametrico
ansari.test(tip ~sex,tips) #H0: s_x/s_y=1 el p-valor >0.05?
# var.equal = TRUE ejecuta una prueba t de dos muestras estándar mientras que
# var.equal = FALSE (el valor predeterminado) ejecutaría la prueba de Welch (no requiere varianzas iguales
#Varianzas iguales, usamos el two-sample t-test
t.test(tip~sex,data=tips,var.equal=T)
tips$day-1
tips$day
tipIntercept<-aov(tip~day,tips)
tipAnova$coefficients
rm(list=ls())
tipAnova<-aov(tip~day-1,tips)
tipIntercept<-aov(tip~day,tips)
tipAnova$coefficients
tipIntercept$coefficients
tips~day-1
class(tips~day-1)
x<-tips~day-1
x
?aov
tipIntercept$coefficients
rm(list=ls())
tipAnova<-aov(tip~day-1,tips)
tipIntercept<-aov(tip~day,tips)
tipAnova$coefficients
tipIntercept$coefficients
table(tips$day)
#ANOVA prueba si un grupo es diferente de cualquier otro grupo pero no especifica
#qué grupo es diferente. Así que, un summary solo devuelve un único valor p.
summary(tipAnova)
?anova
posicion <- c
bateo <- c(0.359, 0.34, 0.33, 0.341, 0.366, 0.333, 0.37, 0.331, 0.381, 0.332, 0.365, 0.345, 0.313, 0.325, 0.327, 0.337, 0.336, 0.291, 0.34, 0.31, 0.365, 0.356, 0.35, 0.39, 0.388, 0.345, 0.27, 0.306, 0.393, 0.331, 0.365, 0.369, 0.342, 0.329, 0.376, 0.414, 0.327, 0.354, 0.321, 0.37, 0.313, 0.341, 0.325, 0.312, 0.346, 0.34, 0.401, 0.372, 0.352, 0.354, 0.341, 0.365, 0.333, 0.378, 0.385, 0.287, 0.303, 0.334, 0.359, 0.352, 0.321, 0.323, 0.302, 0.349, 0.32, 0.356, 0.34, 0.393, 0.288, 0.339, 0.388, 0.283, 0.311, 0.401, 0.353, 0.42, 0.393, 0.347, 0.424, 0.378, 0.346, 0.355, 0.322, 0.341, 0.306, 0.329, 0.271, 0.32, 0.308, 0.322, 0.388, 0.351, 0.341, 0.31, 0.393, 0.411, 0.323, 0.37, 0.364, 0.321, 0.351, 0.329, 0.327, 0.402, 0.32, 0.353, 0.319, 0.319, 0.343, 0.288, 0.32, 0.338, 0.322, 0.303, 0.356, 0.303, 0.351, 0.325, 0.325, 0.361, 0.375, 0.341, 0.383, 0.328, 0.3, 0.277, 0.359, 0.358, 0.381, 0.324, 0.293, 0.324, 0.329, 0.294, 0.32, 0.361, 0.347, 0.317, 0.316, 0.342, 0.368, 0.319, 0.317, 0.302, 0.321, 0.336, 0.347, 0.279, 0.309, 0.358, 0.318, 0.342, 0.299, 0.332, 0.349, 0.387, 0.335, 0.358, 0.312, 0.307, 0.28, 0.344, 0.314, 0.24, 0.331, 0.357, 0.346, 0.351, 0.293, 0.308, 0.374, 0.362, 0.294, 0.314, 0.374, 0.315, 0.324, 0.382, 0.353, 0.305, 0.338, 0.366, 0.357, 0.326, 0.332, 0.323, 0.306, 0.31, 0.31, 0.333, 0.34, 0.4, 0.389, 0.308, 0.411, 0.278, 0.326, 0.335, 0.316, 0.371, 0.314, 0.384, 0.379, 0.32, 0.395, 0.347, 0.307, 0.326, 0.316, 0.341, 0.308, 0.327, 0.337, 0.36, 0.32, 0.372, 0.306, 0.305, 0.347, 0.281, 0.281, 0.296, 0.306, 0.343, 0.378, 0.393, 0.337, 0.327, 0.336, 0.32, 0.381, 0.306, 0.358, 0.311, 0.284, 0.364, 0.315, 0.342, 0.367, 0.307, 0.351, 0.372, 0.304, 0.296, 0.332, 0.312, 0.437, 0.295, 0.316, 0.298, 0.302, 0.342, 0.364, 0.304, 0.295, 0.305, 0.359, 0.335, 0.338, 0.341, 0.3, 0.378, 0.412, 0.273, 0.308, 0.309, 0.263, 0.291, 0.359, 0.352, 0.262, 0.274, 0.334, 0.343, 0.267, 0.321, 0.3, 0.327, 0.313, 0.316, 0.337, 0.268, 0.342, 0.292, 0.39, 0.332, 0.315, 0.298, 0.298, 0.331, 0.361, 0.272, 0.287, 0.34, 0.317, 0.327, 0.354, 0.317, 0.311, 0.174, 0.302, 0.302, 0.291, 0.29, 0.268, 0.352, 0.341, 0.265, 0.307, 0.36, 0.305, 0.254, 0.279, 0.321, 0.305, 0.35, 0.308, 0.326, 0.219, 0.23, 0.322, 0.405, 0.321, 0.291, 0.312, 0.357, 0.324)
datos <- data.frame(posicion = posicion, bateo = bateo)
table(datos$posicion)
tipsByDay<-ddply(tips,"day",summarize,
tip.mean=mean(tip),tip.sd=sd(tip),
Length=NROW(tip),
tfrac=qt(p=0.90,df=Length-1),
Lower=tip.mean-tfrac*tip.sd/sqrt(Length),
Upper=tip.mean+tfrac*tip.sd/sqrt(Length))
#ANOVA prueba si un grupo es diferente de cualquier otro grupo pero no especifica
#qué grupo es diferente. Así que, un summary solo devuelve un único valor p.
summary(tipAnova)
tipsByDay<-ddply(tips,"day",summarize,
tip.mean=mean(tip),tip.sd=sd(tip),
Length=NROW(tip),
tfrac=qt(p=0.90,df=Length-1),
Lower=tip.mean-tfrac*tip.sd/sqrt(Length),
Upper=tip.mean+tfrac*tip.sd/sqrt(Length))
ggplot(tipsByDay,aes(x=tip.mean,y=day))+geom_point()+
geom_errorbarh(aes(xmin=Lower,xmax=Upper),height=0.3)
#ANOVA prueba si un grupo es diferente de cualquier otro grupo pero no especifica
#qué grupo es diferente. Así que, un summary solo devuelve un único valor p.
summary(tipAnova)
aggregate(bateo ~ posicion, data = datos, FUN = mean)
aggregate(bateo ~ posicion, data = datos, FUN = sd)
ggplot(data = datos, aes(x = posicion, y = bateo, color = posicion)) +
geom_boxplot() +
theme_bw()
#Supóngase que se un estudio quiere comprobar si existe una diferencia significativa
# entre el % de bateos exitosos de los jugadores de béisbol dependiendo de la posición
# en la que juegan. En caso de que exista diferencia se quiere saber qué posiciones
# difieren del resto. La siguiente tabla contiene una muestra de jugadores seleccionados
# aleatoriamente.
posicion <- c
bateo <- c(0.359, 0.34, 0.33, 0.341, 0.366, 0.333, 0.37, 0.331, 0.381, 0.332, 0.365, 0.345, 0.313, 0.325, 0.327, 0.337, 0.336, 0.291, 0.34, 0.31, 0.365, 0.356, 0.35, 0.39, 0.388, 0.345, 0.27, 0.306, 0.393, 0.331, 0.365, 0.369, 0.342, 0.329, 0.376, 0.414, 0.327, 0.354, 0.321, 0.37, 0.313, 0.341, 0.325, 0.312, 0.346, 0.34, 0.401, 0.372, 0.352, 0.354, 0.341, 0.365, 0.333, 0.378, 0.385, 0.287, 0.303, 0.334, 0.359, 0.352, 0.321, 0.323, 0.302, 0.349, 0.32, 0.356, 0.34, 0.393, 0.288, 0.339, 0.388, 0.283, 0.311, 0.401, 0.353, 0.42, 0.393, 0.347, 0.424, 0.378, 0.346, 0.355, 0.322, 0.341, 0.306, 0.329, 0.271, 0.32, 0.308, 0.322, 0.388, 0.351, 0.341, 0.31, 0.393, 0.411, 0.323, 0.37, 0.364, 0.321, 0.351, 0.329, 0.327, 0.402, 0.32, 0.353, 0.319, 0.319, 0.343, 0.288, 0.32, 0.338, 0.322, 0.303, 0.356, 0.303, 0.351, 0.325, 0.325, 0.361, 0.375, 0.341, 0.383, 0.328, 0.3, 0.277, 0.359, 0.358, 0.381, 0.324, 0.293, 0.324, 0.329, 0.294, 0.32, 0.361, 0.347, 0.317, 0.316, 0.342, 0.368, 0.319, 0.317, 0.302, 0.321, 0.336, 0.347, 0.279, 0.309, 0.358, 0.318, 0.342, 0.299, 0.332, 0.349, 0.387, 0.335, 0.358, 0.312, 0.307, 0.28, 0.344, 0.314, 0.24, 0.331, 0.357, 0.346, 0.351, 0.293, 0.308, 0.374, 0.362, 0.294, 0.314, 0.374, 0.315, 0.324, 0.382, 0.353, 0.305, 0.338, 0.366, 0.357, 0.326, 0.332, 0.323, 0.306, 0.31, 0.31, 0.333, 0.34, 0.4, 0.389, 0.308, 0.411, 0.278, 0.326, 0.335, 0.316, 0.371, 0.314, 0.384, 0.379, 0.32, 0.395, 0.347, 0.307, 0.326, 0.316, 0.341, 0.308, 0.327, 0.337, 0.36, 0.32, 0.372, 0.306, 0.305, 0.347, 0.281, 0.281, 0.296, 0.306, 0.343, 0.378, 0.393, 0.337, 0.327, 0.336, 0.32, 0.381, 0.306, 0.358, 0.311, 0.284, 0.364, 0.315, 0.342, 0.367, 0.307, 0.351, 0.372, 0.304, 0.296, 0.332, 0.312, 0.437, 0.295, 0.316, 0.298, 0.302, 0.342, 0.364, 0.304, 0.295, 0.305, 0.359, 0.335, 0.338, 0.341, 0.3, 0.378, 0.412, 0.273, 0.308, 0.309, 0.263, 0.291, 0.359, 0.352, 0.262, 0.274, 0.334, 0.343, 0.267, 0.321, 0.3, 0.327, 0.313, 0.316, 0.337, 0.268, 0.342, 0.292, 0.39, 0.332, 0.315, 0.298, 0.298, 0.331, 0.361, 0.272, 0.287, 0.34, 0.317, 0.327, 0.354, 0.317, 0.311, 0.174, 0.302, 0.302, 0.291, 0.29, 0.268, 0.352, 0.341, 0.265, 0.307, 0.36, 0.305, 0.254, 0.279, 0.321, 0.305, 0.35, 0.308, 0.326, 0.219, 0.23, 0.322, 0.405, 0.321, 0.291, 0.312, 0.357, 0.324)
datos <- data.frame(posicion = posicion, bateo = bateo)
table(datos$posicion)
# Se identifica el número de grupos y cantidad de observaciones por grupo para
# determinar si es un modelo equilibrado. También se calculan la media y desviación
# típica de caga grupo.
table(datos$posicion)
aggregate(bateo ~ posicion, data = datos, FUN = mean)
aggregate(bateo ~ posicion, data = datos, FUN = sd)
#Dado que el número de observaciones por grupo no es constante, se trata de un modelo
# no equilibrado. Es importante tenerlo en cuenta cuando se comprueben las condiciones
#de normalidad y homocedasticidad.
# La representación gráfica mas útil antes de realizar un ANOVA es el modelo Box-Plot.
ggplot(data = datos, aes(x = posicion, y = bateo, color = posicion)) +
geom_boxplot() +
theme_bw()
if(!require("nortest")){install.packages("nortest",quiet = T);library("nortest")}
by(data = datos,INDICES = datos$posicion,FUN = function(x){ lillie.test(x$bateo)})
lillie.test(x$bateo)
lillie.test(datos$bateo)
fligner.test(bateo ~ posicion,datos)
fligner.test(bateo ~ posicion,datos)
leveneTest(bateo ~ posicion,datos,center = "median")
if(!require("car")){install.packages("car",quiet = T);library("car")
}
if(!require("car")){install.packages("car",quiet = T);library("car")}
fligner.test(bateo ~ posicion,datos)
leveneTest(bateo ~ posicion,datos,center = "median")
anova <- aov(datos$bateo ~ datos$posicion)
summary(anova)
plot(anova)
#-----------------------------------------------#
#------------ Estadisticos basicos -------------#
#-----------------------------------------------#
set.seed(123)
x<-rnorm(3000,0,10)
ejemploQQ<-data.frame(V1=c(3,11,16,19,20,21,22,23,24,24,24,25,26,27,28,29,29,30,30,31,32,34))
ejemploQQ$V1 <- sort(ejemploQQ$V1)
n <- length(ejemploQQ$V1)
ejemploQQ$pi <- (1:n-a)/(n)
# ejemploQQ$pi <- (1:n-a)/(n+1-2*a)
ejemploQQ$phiInv <- qnorm(ejemploQQ$pi)
par(mfrow=c(1,2))
plot(ejemploQQ$phiInv,ejemploQQ$V1,
xlab="Cuantiles Normal Est\u00e1ndar",
ylab="Datos ordenados", main="Ejemplo (a mano)")
ejemploQQ<-data.frame(V1=c(3,11,16,19,20,21,22,23,24,24,24,25,26,27,28,29,29,30,30,31,32,34))
ejemploQQ$V1 <- sort(ejemploQQ$V1)
n <- length(ejemploQQ$V1)
a <- 1/2
ejemploQQ$pi <- (1:n-a)/(n)
# ejemploQQ$pi <- (1:n-a)/(n+1-2*a)
ejemploQQ$phiInv <- qnorm(ejemploQQ$pi)
par(mfrow=c(1,2))
plot(ejemploQQ$phiInv,ejemploQQ$V1,
xlab="Cuantiles Normal Est\u00e1ndar",
ylab="Datos ordenados", main="Ejemplo (a mano)")
qqnorm(ejemploQQ$V1,main ="Usando la funci\u00f3n qqnorm")
qqline(ejemploQQ$V1)
1:100
c(1:100)
c(0:100,0.5)
c(0:0.5:100)
c(0:100:0.5)
a<-(0:100)
b=(1-a/100)/(a/100)
plot(a,b)
rm(list=ls())
t.test(tips$tip,alternative = "two.sided",mu=2.5)
head(tips)
#que ocurre si tengo variables discretas?
data(tips)
head(tips)
ggpairs(tips)
#Probamos si la media es mayor que 2.5
t.test(tips$tip,alternative = "greater",mu=2.5)
#Probamos si la media es mayor que 2.5
t.test(tips$tip,alternative = "two.sided",mu=2.5)
#Probamos si la media es mayor que 2.5
t.test(tips$tip,alternative = "two.sided",mu=2.998)
#Probamos si la media es mayor que 2.5
t.test(tips$tip,alternative = "two.sided",mu=2.5)
#Probamos si la media es mayor que 2.5
t.test(tips$tip,alternative = "two.sided",mu=3)
#Probamos si la media es mayor que 2.5
t.test(tips$tip,alternative = "two.sided",mu=3.16)
#Probamos si la media es mayor que 2.5
t.test(tips$tip,alternative = "two.sided",mu=3.17)
QQ
hist(tips$tip)
hist(tips$tip)
#Probamos si la media es mayor que 2.5
t.test(tips$tip,alternative = "two.sided",mu=2.5)
#Probamos si la media es mayor que 2.5
t.test(tips$tip,alternative = "two.sided",mu=2.99)
#Probamos si la media es mayor que 2.5
t.test(tips$tip,alternative = "two.sided",mu=2.5)
#ejemplo
randT<-rt(30000,df=NROW(tips)-1)
plot(randT)
plot(sort(randT))
hist(randT)
#graficamos
ggplot(data.frame(x=randT))+
geom_density(aes(x=x),fill="grey",color="grey") +
geom_vline(xintercept = tipTTest$statistic) + #El estadístico T es la linea continua
geom_vline(xintercept = mean(randT) + c(-2,2)*sd(randT),linetype=2) #Media más o menos una desviación
#graficamos
ggplot(data.frame(x=randT))+
geom_density(aes(x=x),fill="grey",color="grey") +
geom_vline(xintercept = tipTTest$statistic) + #El estadístico T es la linea continua
geom_vline(xintercept = mean(randT) + c(-2,2)*sd(randT),linetype=2)
#hallamos el t-estadistico y otra informacion
tipTTest<-t.test(tips$tip,alternative = "two.sided",mu=2.5)
tipTTest<-t.test(tips$tip,alternative = "two.sided",mu=2.5)
#graficamos
ggplot(data.frame(x=randT))+
geom_density(aes(x=x),fill="grey",color="grey") +
geom_vline(xintercept = tipTTest$statistic) + #El estadístico T es la linea continua
geom_vline(xintercept = mean(randT) + c(-2,2)*sd(randT),linetype=2)
#para chicas
shapiro.test(tips$tip[which(tips$sex=="Female")]) #p-valor > 0.05
#para chicos
shapiro.test(tips$tip[which(tips$sex=="Male")]) #p-valor >0.05
ggplot(tips,aes(x=tip,fill=sex)) +
geom_histogram(binwidth = 0.5,alpha=1/2)
#Debemos verificar la varianza para cada muestra, pues
# es necesario que ambas tengan la misma varianza.
aggregate(tip ~sex,data=tips,var)
#test de normalidad para la distribucion de tip
# Se plantea como hipótesis nula que una muestra x1, ..., xn proviene de una
# población normalmente distribuida.
shapiro.test(tips$tip)
# var.equal = TRUE ejecuta una prueba t de dos muestras estándar mientras que
# var.equal = FALSE (el valor predeterminado) ejecutaría la prueba de Welch (no requiere varianzas iguales
#Varianzas iguales, usamos el two-sample t-test
t.test(tip~sex,data=tips,var.equal=T) #H0: x-y =0 que valor tiene p-value?
tipIntercept<-aov(tip~day,tips)
tipAnova$coefficients
tipAnova<-aov(tip~day-1,tips)
tipIntercept<-aov(tip~day,tips)
tipAnova$coefficients
tipIntercept$coefficients
#ANOVA prueba si un grupo es diferente de cualquier otro grupo pero no especifica
#qué grupo es diferente. Así que, un summary solo devuelve un único valor p.
summary(tipAnova)
tipsByDay<-ddply(tips,"day",summarize,
tip.mean=mean(tip),tip.sd=sd(tip),
Length=NROW(tip),
tfrac=qt(p=0.90,df=Length-1),
Lower=tip.mean-tfrac*tip.sd/sqrt(Length),
Upper=tip.mean+tfrac*tip.sd/sqrt(Length))
ggplot(tipsByDay,aes(x=tip.mean,y=day))+geom_point()+
geom_errorbarh(aes(xmin=Lower,xmax=Upper),height=0.3)
posicion <- c
bateo <- c(0.359, 0.34, 0.33, 0.341, 0.366, 0.333, 0.37, 0.331, 0.381, 0.332, 0.365, 0.345, 0.313, 0.325, 0.327, 0.337, 0.336, 0.291, 0.34, 0.31, 0.365, 0.356, 0.35, 0.39, 0.388, 0.345, 0.27, 0.306, 0.393, 0.331, 0.365, 0.369, 0.342, 0.329, 0.376, 0.414, 0.327, 0.354, 0.321, 0.37, 0.313, 0.341, 0.325, 0.312, 0.346, 0.34, 0.401, 0.372, 0.352, 0.354, 0.341, 0.365, 0.333, 0.378, 0.385, 0.287, 0.303, 0.334, 0.359, 0.352, 0.321, 0.323, 0.302, 0.349, 0.32, 0.356, 0.34, 0.393, 0.288, 0.339, 0.388, 0.283, 0.311, 0.401, 0.353, 0.42, 0.393, 0.347, 0.424, 0.378, 0.346, 0.355, 0.322, 0.341, 0.306, 0.329, 0.271, 0.32, 0.308, 0.322, 0.388, 0.351, 0.341, 0.31, 0.393, 0.411, 0.323, 0.37, 0.364, 0.321, 0.351, 0.329, 0.327, 0.402, 0.32, 0.353, 0.319, 0.319, 0.343, 0.288, 0.32, 0.338, 0.322, 0.303, 0.356, 0.303, 0.351, 0.325, 0.325, 0.361, 0.375, 0.341, 0.383, 0.328, 0.3, 0.277, 0.359, 0.358, 0.381, 0.324, 0.293, 0.324, 0.329, 0.294, 0.32, 0.361, 0.347, 0.317, 0.316, 0.342, 0.368, 0.319, 0.317, 0.302, 0.321, 0.336, 0.347, 0.279, 0.309, 0.358, 0.318, 0.342, 0.299, 0.332, 0.349, 0.387, 0.335, 0.358, 0.312, 0.307, 0.28, 0.344, 0.314, 0.24, 0.331, 0.357, 0.346, 0.351, 0.293, 0.308, 0.374, 0.362, 0.294, 0.314, 0.374, 0.315, 0.324, 0.382, 0.353, 0.305, 0.338, 0.366, 0.357, 0.326, 0.332, 0.323, 0.306, 0.31, 0.31, 0.333, 0.34, 0.4, 0.389, 0.308, 0.411, 0.278, 0.326, 0.335, 0.316, 0.371, 0.314, 0.384, 0.379, 0.32, 0.395, 0.347, 0.307, 0.326, 0.316, 0.341, 0.308, 0.327, 0.337, 0.36, 0.32, 0.372, 0.306, 0.305, 0.347, 0.281, 0.281, 0.296, 0.306, 0.343, 0.378, 0.393, 0.337, 0.327, 0.336, 0.32, 0.381, 0.306, 0.358, 0.311, 0.284, 0.364, 0.315, 0.342, 0.367, 0.307, 0.351, 0.372, 0.304, 0.296, 0.332, 0.312, 0.437, 0.295, 0.316, 0.298, 0.302, 0.342, 0.364, 0.304, 0.295, 0.305, 0.359, 0.335, 0.338, 0.341, 0.3, 0.378, 0.412, 0.273, 0.308, 0.309, 0.263, 0.291, 0.359, 0.352, 0.262, 0.274, 0.334, 0.343, 0.267, 0.321, 0.3, 0.327, 0.313, 0.316, 0.337, 0.268, 0.342, 0.292, 0.39, 0.332, 0.315, 0.298, 0.298, 0.331, 0.361, 0.272, 0.287, 0.34, 0.317, 0.327, 0.354, 0.317, 0.311, 0.174, 0.302, 0.302, 0.291, 0.29, 0.268, 0.352, 0.341, 0.265, 0.307, 0.36, 0.305, 0.254, 0.279, 0.321, 0.305, 0.35, 0.308, 0.326, 0.219, 0.23, 0.322, 0.405, 0.321, 0.291, 0.312, 0.357, 0.324)
datos <- data.frame(posicion = posicion, bateo = bateo)
table(datos$posicion)
table(datos$posicion)
aggregate(bateo ~ posicion, data = datos, FUN = mean)
aggregate(bateo ~ posicion, data = datos, FUN = sd)
ggplot(data = datos, aes(x = posicion, y = bateo, color = posicion)) +
geom_boxplot() +
theme_bw()
par(mfrow = c(2,2))
par(mfrow = c(2,2))
qqnorm(datos[datos$posicion == "C","bateo"], main = "C")
qqline(datos[datos$posicion == "C","bateo"])
qqnorm(datos[datos$posicion == "DH","bateo"], main = "DH")
qqline(datos[datos$posicion == "DH","bateo"])
qqnorm(datos[datos$posicion == "IF","bateo"], main = "IF")
qqline(datos[datos$posicion == "IF","bateo"])
qqnorm(datos[datos$posicion == "OF","bateo"], main = "OF")
qqline(datos[datos$posicion == "OF","bateo"])
hist(datos[datos$posicion])
datos
hist(datos[datos$posicion,2])
hist(datos[datos$posicion =="C",2])
hist(datos[datos$posicion =="DH",2])
hist(datos[datos$posicion =="IF",2])
hist(datos[datos$posicion =="OF",2])
par(mfrow = c(2,2))
qqnorm(datos[datos$posicion == "C","bateo"], main = "C")
qqline(datos[datos$posicion == "C","bateo"])
qqnorm(datos[datos$posicion == "DH","bateo"], main = "DH")
qqline(datos[datos$posicion == "DH","bateo"])
qqnorm(datos[datos$posicion == "IF","bateo"], main = "IF")
qqline(datos[datos$posicion == "IF","bateo"])
qqnorm(datos[datos$posicion == "OF","bateo"], main = "OF")
qqline(datos[datos$posicion == "OF","bateo"])
by(data = datos,INDICES = datos$posicion,FUN = function(x){ lillie.test(x$bateo)})
fligner.test(bateo ~ posicion,datos)
leveneTest(bateo ~ posicion,datos,center = "median")
anova <- aov(datos$bateo ~ datos$posicion)
summary(anova)
plot(anova)
