View(data_scrap)
View(data_scrap)
rm(list = ls())
############INPUT###########
provincia<-"madrid"  #Elige la provincia del scraping
operacion <- "venta" #Elige el tipo de operacion, deber ser: "alquiler" o "venta"
############################
#En el siguiente data frame almacenaremos los datos del web scraping
data_scrap<-data.frame(address=character(),localidad=character(),provincia=character(),last_price=numeric(),
m2=numeric(),fuente=character(),id=character(),operacion=character())
#inicializacion de valores del scrap
price<-0
pag<-1
#intentamos medir el tiempo que tarda
start.time <- Sys.time()
while(length(price!=0)){
print(paste0("Scraping de la pagina ",pag))
#URL a realizar scraping, requiere del tipo de operacion, provincia y numero de pagina
url<-paste0(NULL)
#Se extrae el html y se realiza un "try" para que el codigo continue en caso de error
error<-try(pisoscom <- read_html(url),silent = T)
if(class(error)[1]!="try-error"){
#las siguientes lineas son para extaer el numero de la ultima pagina, de esta manera saber
#cuando el codigo debe detenerse
if(pag==1){
NULL
}
#Para direccion
address<-pisoscom %>%
html_nodes(NULL) %>%  #item de direccion, no es necesario la limpieza del texto
html_text()
detail<-pisoscom %>%
html_nodes(NULL) %>% #item de precio
html_text()
#Limipieza de texto de precio
if(grepl("venta",url)){
#Para venta
NULL
}else{
#Para alquiler
NULL
}
price<-gsub(" ","",chartr(".", " " ,price))
price<-as.numeric(price[!is.na(as.numeric(price))])
#Es conveniente guardar un id de las descargas que se realizan, que se pueda
#identificar posteriormente en caso de errores o comprobaciones, etc
id<-pisoscom %>%
html_nodes(NULL) %>%
html_attr("href")
id<-strsplit(id,"-")
id<-do.call(rbind,id)[,3]
id<-paste0("pi_",gsub("/","",id))
#Extraemos localidad
localidad <- pisoscom %>%
html_nodes("NULL") %>%
html_text()
pos<-!grepl("\\(",localidad)
localidad[pos]<-gsub("  ","",localidad[pos])
localidad[pos]<-gsub("\r\n","",localidad[pos])
#Limpieza de texto
localidad[!pos]<- unlist(regmatches(localidad, gregexpr("(?<=\\().*?(?=\\))", localidad, perl=T)))
localidad<-gsub(".*\\. ", "", localidad)
#otra manera de hacerlo mas entendible
# first<-unlist(gregexpr(pattern = "\\(",localidad[!pos]))
# last<-unlist(gregexpr(pattern = "\\)",localidad[!pos]))
# substring(localidad[!pos],first+1,last-1)
#Extraemos los m^2
m2<-pisoscom %>%
html_nodes(NULL) %>%
html_text()
lambda<-function(x){
first<-gregexpr(pattern = NULL,x)[[1]][1]
last<-gregexpr(pattern = NULL,x)[[1]][1]
result<-substring(x,first,last-2)
return(result)
}
m2<-unlist(lapply(m2, function(x) lambda(x)))
#Se actualizan los otros parametros, para quedarnos con aquellos que tienen la informacion de precio
address<-address[grepl("\u20ac",detail)]
id<-id[grepl("\u20ac",detail)]
localidad<-localidad[grepl("\u20ac",detail)]
m2<-localidad[grepl("\u20ac",detail)]
#Guardamos los datos en un dataset temporal llamado data_scrap_by_page
data_scrap_by_page<-data.frame(address,localidad,rep(provincia,length(price)),price,m2,"pisoscom",id,operacion)
names(data_scrap_by_page)<-names(data_scrap)
#Si ya hemos descargado datos, lo colocamos debajo del dataset final
data_scrap<-rbind(data_scrap,data_scrap_by_page)
#Si recorremos la ultima pagina, se detiene el bucle
pag<-pag+1
if(pag==(lastpage+1)){break; price<-character()}
#Es recomendable realizar un pause del sistema en cada iteracion y cada cierta cantidad de iteraciones
#esto para evitar que nos pillen ;-)
Sys.sleep(2+runif(1,min = -0.5,max = 0.5))
if(pag %% 10 == 0){print("Sleeping Zzzzzz..."); Sys.sleep(NULL)}
}else{
price<-character(); break
}
}
#Convertimos todo a string
data_scrap<-data.frame(sapply(data_scrap,as.character),stringsAsFactors = F)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken #Tiempo que ha tardado
#anadimos la ficha que se ha realizado la descarga
data_scrap$date_last_price<- Sys.Date()
data_scrap$address<-as.character(data_scrap$address)
data_scrap
rm(list=ls())
#Mi apikey
APIkey<-"AIzaSyDMfeTSBhfGRgwdt8LPVfwhAtZTnxOdA44"
#cargamos las funciones auxiliares
source("./Web_scraping/clean_data_scrap.R")
#leemos el fichero en output
load(list.files("./data_out",full.names = T,pattern=".Rdata"))
#extraemos la direccion a limpiar y geolocalizar
address <- data_scrap$address
#---------------- Limpieza de la direccion address ----------------------#
address <- tolower(address)
address <- chartr("\u00e1\u00e9\u00ed\u00f3\u00fa","aeiou",address) #quitamos tildes
#obtenemos el tipo de vivienda
Tipo <- getTipo(address)
DirClean_DirCompleta <- Get_DirClean_DirCompleta(address)
DirClean <- DirClean_DirCompleta[[1]]
address_complete <- paste0(DirClean, ", ",data_scrap$localidad)
#Se realiza el sigueinte while para que realice al menos tres intentos
while(status=="ZERO_RESULTS" & j<=3){
result<-googleway::google_geocode(address,key=APIkey)
status<-result$status
if(status=="ZERO_RESULTS"){Sys.sleep(3)}
j<-j+1
}
load("C:/Users/Illan/Desktop/COSAS KSCHOOL/Data_Engineering_R/data_out/data_scrap_madrid_venta_pisoscom_2019-04-22.Rdata")
load("C:/Users/Illan/Desktop/COSAS KSCHOOL/Data_Engineering_R/data_out/data_scrap_madrid_venta_pisoscom_2019-04-22.Rdata")
View(data_scrap)
View(data_scrap)
for(i in 1:length(address_complete)){
print(paste("Geolocalizando direccion",i,"de",length(address_complete)))
address<-address_complete[i]
status<-"ZERO_RESULTS"
j<-1
#Se realiza el sigueinte while para que realice al menos tres intentos
while(status=="ZERO_RESULTS" & j<=3){
result<-googleway::google_geocode(address,key=APIkey)
status<-result$status
if(status=="ZERO_RESULTS"){Sys.sleep(3)}
j<-j+1
}
#Si el resultado es KO se asigna NA
if(status=="ZERO_RESULTS"){result$results$geometry$location<-data.frame(lat=NA,lng=NA);result$results$formatted_address<-NA}
#guardamos los resultados
if(exists("latlon")==F){
latlon<-data.frame(result$results$geometry$location[1,],address,formated_address=result$results$formatted_address[1])}else{
latlon<-rbind(latlon,data.frame(result$results$geometry$location[1,],address,formated_address=result$results$formatted_address[1]))
}
}
#obtenemos el tipo de vivienda
Tipo <- getTipo(address)
Tipo
DirClean_DirCompleta
#--------------------------------------------------------------------------------------------------#
#  ___           _          _                  ____                                     _
# |_ _|  _ __   (_)   ___  (_)   ___    _     / ___|   ___    ___     ___    ___     __| |   ___
#  | |  | '_ \  | |  / __| | |  / _ \  (_)   | |  _   / _ \  / _ \   / __|  / _ \   / _` |  / _ \
#  | |  | | | | | | | (__  | | | (_) |  _    | |_| | |  __/ | (_) | | (__  | (_) | | (_| | |  __/
# |___| |_| |_| |_|  \___| |_|  \___/  (_)    \____|  \___|  \___/   \___|  \___/   \__,_|  \___|
#--------------------------------------------------------------------------------------------------#
rm(list=ls())
#Mi apikey
APIkey<-"AIzaSyDMfeTSBhfGRgwdt8LPVfwhAtZTnxOdA44"
#cargamos las funciones auxiliares
source("./Web_scraping/clean_data_scrap.R")
#leemos el fichero en output
load(list.files("./data_out",full.names = T,pattern=".Rdata"))
#extraemos la direccion a limpiar y geolocalizar
address <- data_scrap$address
#---------------- Limpieza de la direccion address ----------------------#
address <- tolower(address)
address <- chartr("\u00e1\u00e9\u00ed\u00f3\u00fa","aeiou",address) #quitamos tildes
#obtenemos el tipo de vivienda
Tipo <- getTipo(address)
DirClean_DirCompleta <- Get_DirClean_DirCompleta(address)
DirClean <- DirClean_DirCompleta[[1]]
address_complete <- paste0(DirClean, ", ",data_scrap$localidad)
#---------------- Fin Limpieza de la direccion address ----------------------#
for(i in 1:length(address_complete)){
print(paste("Geolocalizando direccion",i,"de",length(address_complete)))
address<-address_complete[i]
status<-"ZERO_RESULTS"
j<-1
#Se realiza el sigueinte while para que realice al menos tres intentos
while(status=="ZERO_RESULTS" & j<=3){
result<-googleway::google_geocode(address,key=APIkey)
status<-result$status
if(status=="ZERO_RESULTS"){Sys.sleep(3)}
j<-j+1
}
#Si el resultado es KO se asigna NA
if(status=="ZERO_RESULTS"){result$results$geometry$location<-data.frame(lat=NA,lng=NA);result$results$formatted_address<-NA}
#guardamos los resultados
if(exists("latlon")==F){
latlon<-data.frame(result$results$geometry$location[1,],address,formated_address=result$results$formatted_address[1])}else{
latlon<-rbind(latlon,data.frame(result$results$geometry$location[1,],address,formated_address=result$results$formatted_address[1]))
}
}
names(latlon)<-c("lat","lon","address","formated_address")
save(latlon,file="latlon.Rdata")
latlon
View(latlon)
View(latlon)
rm(list=ls())
load("latlon.Rdata")
df_to_download<-latlon
APIkey<-"AIzaSyDMfeTSBhfGRgwdt8LPVfwhAtZTnxOdA44"
idx_api<-1
#------------------------------------------------------------------------------#
## API_Google: Este codigo descarga la data de Google maps utilizando
## la API Google Places referente a restaurantes, hospitales, etc. que se encuentran
## alrededor de una cierta coordenada.
#------------------------------------------------------------------------------#
## INPUT: datos geolocalizados.
## OUTPUT: datos de Google maps (data_google_maps).
#------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------------#
#    ___           _          _                    _      ____    ___      ____                           _
#   |_ _|  _ __   (_)   ___  (_)   ___    _       / \    |  _ \  |_ _|    / ___|   ___     ___     __ _  | |   ___
#    | |  | '_ \  | |  / __| | |  / _ \  (_)     / _ \   | |_) |  | |    | |  _   / _ \   / _ \   / _` | | |  / _ \
#    | |  | | | | | | | (__  | | | (_) |  _     / ___ \  |  __/   | |    | |_| | | (_) | | (_) | | (_| | | | |  __/
#   |___| |_| |_| |_|  \___| |_|  \___/  (_)   /_/   \_\ |_|     |___|    \____|  \___/   \___/   \__, | |_|  \___|
#                                                                                                 |___/
#--------------------------------------------------------------------------------------------------------------------------#
rm(list=ls())
load("latlon.Rdata")
df_to_download<-latlon
APIkey<-"AIzaSyDMfeTSBhfGRgwdt8LPVfwhAtZTnxOdA44"
idx_api<-1
data_google_maps<-data.frame(dist_health=rep(0,nrow(df_to_download)),dist_school=rep(0,nrow(df_to_download)),total_food=rep(0,nrow(df_to_download)),dist_subway=rep(0,nrow(df_to_download)),university=rep(0,nrow(df_to_download)),dist_park=rep(0,nrow(df_to_download)),dist_market=rep(0,nrow(df_to_download)))
cont_inmueble<-1
cont_salud<-1
for(cont_inmueble in 1:nrow(df_to_download)){
print(cont_inmueble)
latlon<-as.numeric(df_to_download[cont_inmueble,c("lat","lon")])
############## CENTROS DE SALUD Y HOSPITALES ################
salud<-c("Hospital","Centro de salud")
for(cont_salud in 1:length(salud)){
search<-salud[cont_salud]
result<-google_places(search_string =  search,
location = latlon,
key = APIkey,
keyword = unlist(strsplit(search," "))[1],
language = "es")
df_search<-data.frame(name=result$results$name,result$results$geometry$location)
nearest_search_temp<-df_search[1,]
dest<-as.numeric(nearest_search_temp[,c("lat","lng")])
result<-google_distance(origins=list(latlon), destinations=list(dest), mode = "walking",key=APIkey)
nearest_search_temp$distance<-as.numeric(result$rows$elements[[1]]$distance$value)
if(cont_salud==1){
nearest_search<-nearest_search_temp
}else{nearest_search<-rbind(nearest_search,nearest_search_temp)}
}
dist_health<-min(nearest_search$distance)
############## ESTACIONES  DE METRO O RENFE ################
# result<-google_places(location = latlon,
#                       key = APIkey,
#                       place_type = "subway_station",
#                       radius = 1000)
#
#
# df_search<-data.frame(name=result$results$name,result$results$geometry$location)
# nearest_search_temp<-df_search[1,]
# dest<-as.numeric(nearest_search_temp[,c("lat","lng")])
#
# result<-google_distance(origins=list(latlon), destinations=list(dest), mode = "walking",key=APIkey)
# nearest_search_temp$distance<-as.numeric(result$rows$elements[[1]]$distance$value)
#
# dist_subway<-min(nearest_search_temp$distance)
############ INFORMACION DE UNIVERSIDAD ###################
search<-"Universidad"
result<-google_places(search_string =  search,
location = latlon,
key = APIkey,
radius=1000,
language = "es",
place_type = "university")
df_search<-data.frame(name=result$results$name,result$results$geometry$location)
nearest_search<-df_search[1,]
if(length(nearest_search)!=0){
dest<-as.numeric(nearest_search[,c("lat","lng")])
result<-google_distance(origins=list(latlon), destinations=list(dest), mode = "walking",key=APIkey)
nearest_search$distance<-as.numeric(result$rows$elements[[1]]$distance$value)
university<-ifelse(nearest_search$distance<1500,1,0)}else{
university<-0
}
############ INFORMACION DE COLEGIOS ###################
colegios<-c("Colegio p\u00FAblico","Colegio privado","Colegio concertado")
for(cont_colegios in 1:length(colegios)){
search<-colegios[cont_colegios]
result<-google_places(search_string =  search,
location = latlon,
key = APIkey,
place_type = "school",
radius=1000)
df_search<-data.frame(name=result$results$name,result$results$geometry$location)
nearest_search_temp<-df_search[1,]
dest<-as.numeric(nearest_search_temp[,c("lat","lng")])
result<-google_distance(origins=list(latlon), destinations=list(dest), mode = "walking",key=APIkey)
nearest_search_temp$distance<-as.numeric(result$rows$elements[[1]]$distance$value)
if(cont_colegios==1){
nearest_search<-nearest_search_temp
}else{nearest_search<-rbind(nearest_search,nearest_search_temp)}
}
dist_school<-min(nearest_search$distance)
############ INFORMACION DE PARQUES CERCANOS ###############
result<-google_places(location = latlon,
key = APIkey,
place_type = "park",
radius = 1000,
language = "es")
df_search<-data.frame(name=result$results$name,result$results$geometry$location)
nearest_search<-df_search[1,]
dest<-as.numeric(nearest_search[,c("lat","lng")])
result<-google_distance(origins=list(latlon), destinations=list(dest), mode = "walking",key=APIkey)
nearest_search$distance<-as.numeric(result$rows$elements[[1]]$distance$value)
dist_park<-min(nearest_search$distance)
############ INFORMACION DE LOCALES DE COMIDA ##############
next_page <- NULL
n_it<-1
total_rest_found <- 0
while(n_it == 1 | !is.null(next_page)){
rest_found<-google_places(location = latlon,
place_type = "food",
key = APIkey,
radius = 150,
#rankby = "distance",
page_token = next_page)
#View(rest_found$results)
next_page <-rest_found$next_page_token
total_rest_found<-total_rest_found + length(rest_found$results$vicinity)
n_it = n_it + 1
Sys.sleep(2)
}
total_food<-total_rest_found
############ INFORMACION DE SUPERMERCADOS ###################
search<-"Supermercado"
result<-google_places(search_string=search,
location = latlon,
key = APIkey)
df_search<-data.frame(name=result$results$name,result$results$geometry$location)
df_search$name<-tolower(df_search$name)
#NOTA: "\u00E1 \u00E9 \u00ED \u00f3 \u00fa" son las codificaciones en unicode de "a e i o u" tildadas
df_search$name<-chartr("\u00E1 \u00E9 \u00ED \u00f3 \u00fa","a e i o u",df_search$name)
dest<-paste(df_search$lat,df_search$lng)
dest<-lapply(dest, function(x) as.numeric(strsplit(x, ' ')[[1]]))
result<-google_distance(origins=list(latlon), destinations=dest, mode = "walking",key=APIkey)
df_search$dist<-result$rows$elements[[1]]$distance$value
df_search<-df_search[order(df_search$dist),]
# load("./R_Programming/Modelo_V1.0/functions/super_punctuations.Rdata")
# super_punctuations(df_search[,c("name","dist")])
dist_market<-min(df_search$dist)
############ INFORMACION DE BANCOS ###################
result<-google_places(location = latlon,
key = APIkey,
place_type = "bank",
radius = 1000,
language = "es")
df_search<-data.frame(name=result$results$name,result$results$geometry$location)
nearest_search<-df_search[1,]
dest<-as.numeric(nearest_search[,c("lat","lng")])
result<-google_distance(origins=list(latlon), destinations=list(dest), mode = "walking",key=APIkey)
nearest_search$distance<-as.numeric(result$rows$elements[[1]]$distance$value)
dist_bank<-min(nearest_search$distance)
############## SAVING DATA ###################
data_google_maps$dist_health[cont_inmueble]<-dist_health
data_google_maps$dist_subway[cont_inmueble]<-dist_subway
data_google_maps$total_food[cont_inmueble]<-total_food
data_google_maps$dist_school[cont_inmueble]<-dist_school
data_google_maps$university[cont_inmueble]<-university
data_google_maps$dist_market[cont_inmueble]<-dist_market
data_google_maps$dist_park[cont_inmueble]<-dist_park
data_google_maps$dist_bank[cont_inmueble]<-dist_bank
}
save(data_google_maps,file=paste0(getwd(),"/data_out/data_google.Rdata"))
# load(paste0(getwd(),"/data_out/data_google.Rdata"))
#---------------------------------------------------------------------------#
#                            _____   _
#                           |  ___| (_)  _ __
#                           | |_    | | | '_ \
#                           |  _|   | | | | | |
#                           |_|     |_| |_| |_|
#---------------------------------------------------------------------------#
data_google_maps
consumer_key <- "rrry3jb98a7wjs5xbcwsk3u7z2rb9q77"
consumer_secret <- "OM5tXahuf36x"
#Use basic auth
secret <- jsonlite::base64_enc(paste(consumer_key, consumer_secret, sep = ":"))
req <- httr::POST("https://api.idealista.com/oauth/token",
httr::add_headers(
"Authorization" = paste("Basic", gsub("\n", "", secret)),
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"
),
body = "grant_type=client_credentials"
)
#Extract the access token
token <- paste("Bearer", httr::content(req)$access_token)
#-------------------------------------------------------------------------------#
# IDEALISTA + LATLON: Este algoritmo devuelve informacion de inmuebles que se
# se encuentren alrededor de unas coordenadas.
# INPUT:
# 1) token obtenido con el codigo authidealista.R
# 2) latitud y longitud de la direccion a localizar
# OUTPUT:
# 50 viviendas alrededor de la vivienda
#-------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------#
#  ___           _          _                    _      ____    ___     _       _                  _   _         _
# |_ _|  _ __   (_)   ___  (_)   ___    _       / \    |  _ \  |_ _|   (_)   __| |   ___    __ _  | | (_)  ___  | |_    __ _
#  | |  | '_ \  | |  / __| | |  / _ \  (_)     / _ \   | |_) |  | |    | |  / _` |  / _ \  / _` | | | | | / __| | __|  / _` |
#  | |  | | | | | | | (__  | | | (_) |  _     / ___ \  |  __/   | |    | | | (_| | |  __/ | (_| | | | | | \__ \ | |_  | (_| |
# |___| |_| |_| |_|  \___| |_|  \___/  (_)   /_/   \_\ |_|     |___|   |_|  \__,_|  \___|  \__,_| |_| |_| |___/  \__|  \__,_|
#------------------------------------------------------------------------------------------------------------------------------#
rm(list=ls())
APIkey<-"AIzaSyDMfeTSBhfGRgwdt8LPVfwhAtZTnxOdA44"
#geolocalizamos la direccion de la cual queremos extraer la informacion de inmuebles
address<-"paseo delicias 81, madrid"
result<-google_geocode(address,key=APIkey)
latlon<-as.numeric(result$results$geometry$location)
latlon<-data.frame(lat=latlon[1],lon=latlon[2])
df_activo<-data.frame(address=address,latlon)
source("./APIs/authidealista.R")
url<-paste0("http://api.idealista.com/3.5/es/search?center=",latlon$lat,",",latlon$lon,"&country=es&maxItems=100&numPage=1&distance=500&propertyType=homes&operation=sale")
req <- httr::POST(url, httr::add_headers("Authorization" = token))
json <- httr::content(req)
# json
x<-json$elementList[[1]]
y<-json$elementList[[2]]
df_idealista<-data.frame(propertyCode=0,price=0,size=0,floor=0,
lat=0,lon=0,address=0,neighborhood=0,district=0,
municipality=0,province=0,
country=0)
for(i in 1:length(json$elementList)){
home<-json$elementList[[i]]
df_idealista[i,"propertyCode"]<-home$propertyCode
df_idealista[i,"price"]<-home$price
df_idealista[i,"size"]<-home$size
df_idealista[i,"floor"]<-ifelse(length(home$floor)!=0,home$floor,NA)
df_idealista[i,"lat"]<-home$latitude
df_idealista[i,"lon"]<-home$longitude
df_idealista[i,"address"]<-home$address
df_idealista[i,"neighborhood"]<-home$neighborhood
df_idealista[i,"district"]<-home$district
df_idealista[i,"municipality"]<-home$municipality
df_idealista[i,"province"]<-home$province
df_idealista[i,"country"]<-home$country
}
df_idealista
View(df_idealista)
View(df_idealista)
df_idealista$price/df_idealista$lat
plot(df_idealista$size,df_idealista$price/df_idealista$lat)
plot(df_idealista$size,df_idealista$price/(df_idealista$lat)^2)
plot(df_idealista$size,df_idealista$price/(df_idealista$lat)^2)
plot(df_idealista$size,df_idealista$price/(df_idealista$lat))
plot(df_idealista$size,df_idealista$price/(df_idealista$lat)^2)
plot(df_idealista$size,df_idealista$price)
cosa <- df_idealista$price/df_idealista$lat
cosa2 <- df_idealista$price/(df_idealista$lat)^2
plot(df_idealista$lat, cosa)
plot(df_idealista$lat, cosa2)
cosa2 <- (df_idealista$price/(df_idealista$lat)^2)
plot(df_idealista$lat, cosa2)
plot(df_idealista$lat, cosa)
cosa2 <- (df_idealista$price/(df_idealista$lat)**2)
plot(df_idealista$lat, cosa2)
df_idealista$lat
df_idealista$lat**2
cosa
cosa2
plot(df_idealista$lat, cosa2)
plot(df_idealista$lat, cosa)
cosa2 <- (df_idealista$price/(df_idealista$lat)**2)
plot(df_idealista$lat, cosa2)
plot(df_idealista$lat, cosa)
plot(df_idealista$lat, cosa2)
plot(df_idealista$lat, cosa)
plot(df_idealista$lat, cosa2)
cosa2 <- (df_idealista$price/(df_idealista$lat**2))
plot(df_idealista$lat, cosa2)
cosa
cosa2
cosa/cosa2
df_idealista$lat
cosa <- df_idealista$price/df_idealista$size
cosa2 <- (df_idealista$price/(df_idealista$size**2))
plot(df_idealista$lat, cosa)
plot(df_idealista$lat, cosa2)
plot(df_idealista$size, cosa)
plot(df_idealista$size, cosa2)
plot(df_idealista$size, df_idealista$priceç)
plot(df_idealista$size, df_idealista$price)
plot(df_idealista$size, cosa)
plot(df_idealista$size, cosa2)
plot(df_idealista$size, df_idealista$price)
plot(df_idealista$size, cosa2)
plot(df_idealista$size, cosa)
cosa2 <- (df_idealista$price/(df_idealista$size**1.5))
plot(df_idealista$size, cosa)
plot(df_idealista$size, cosa2)
cosa2 <- (df_idealista$price/(df_idealista$size**1.2))
plot(df_idealista$size, cosa)
plot(df_idealista$size, cosa2)
cosa2 <- (df_idealista$price/(df_idealista$size**0.8))
plot(df_idealista$size, cosa)
plot(df_idealista$size, cosa2)
