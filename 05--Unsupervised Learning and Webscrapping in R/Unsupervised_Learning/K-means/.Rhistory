K.max = 10, B = 50)
# Print the result
print(gap_stat, method = "firstmax")
set.seed(123)
my_final_kmeans <- kmeans(my_data, 4, nstart = 10)
print(my_final_kmeans)
fviz_cluster(my_final_kmeans, data = my_data)
USArrests  %>%
mutate(Cluster = my_final_kmeans$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
USArrests
USArrests  %>%
mutate(Cluster = my_final_kmeans$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
new_obs<-c(11,250,60,22)
classify_kmeans<-function(new_obs,your_kmeans){
my_dist<-c()
for(i in 1:nrow(your_kmeans$centers)){
dist_temp<-stats::dist(rbind(as.numeric(your_kmeans$centers[i,]),new_obs),method = "euclidean")
my_dist<-c(my_dist,dist_temp)
}
result<-which(my_dist==min(my_dist))
print(paste("La nueva observaci\u00f3n pertenece al cluster",result,
"donde estan las observaciones como:",
paste0(names(which(my_final_kmeans$cluster==result))[1:6],collapse = ", ")))
return(result)
}
my_class<-classify_kmeans(new_obs ,my_final_kmeans)
my_final_kmeans$centers
rm(list=ls())
#Leemos los datos
my_data<-USArrests
#Verificamos si el dataset tiene NA's
sapply(my_data,function(x) any(is.na(x)))
#No queremos que el algoritmo dependa de una unidad variable arbitraria
my_data<-scale(my_data)
my_data
class(my_data)
my_data[1]
my_data[[1]]
rm(list=ls())
#Leemos los datos
my_data<-USArrests
max(my_data$UrbanPop)
max(my_data$UrbanPop)
min(my_data$UrbanPop)
mean(my_data$UrbanPop)
sd(my_data$UrbanPop)
attributes(my_data)
rm(list=ls())
#Leemos los datos
my_data<-USArrests
#Verificamos si el dataset tiene NA's
sapply(my_data,function(x) any(is.na(x)))
#No queremos que el algoritmo dependa de una unidad variable arbitraria
my_data<-scale(my_data)
attributes(my_data)
x<-attributes(my_data)
x$`scaled:center`
my_class
my_class<-classify_kmeans(new_obs ,my_final_kmeans)
#---------------------------------------------------------------------------------------------------#
#  ___           _          _                 _  __
# |_ _|  _ __   (_)   ___  (_)   ___    _    | |/ /         _ __ ___     ___    __ _   _ __    ___
#  | |  | '_ \  | |  / __| | |  / _ \  (_)   | ' /   ____  | '_ ` _ \   / _ \  / _` | | '_ \  / __|
#  | |  | | | | | | | (__  | | | (_) |  _    | . \  |____| | | | | | | |  __/ | (_| | | | | | \__ \
# |___| |_| |_| |_|  \___| |_|  \___/  (_)   |_|\_\        |_| |_| |_|  \___|  \__,_| |_| |_| |___/
#---------------------------------------------------------------------------------------------------#
# Este codigo es utilizado para explicar como funciona el k-means con datos reales.
#---------------------------------------------------------------------------------------------------#
rm(list=ls())
#Leemos los datos
my_data<-USArrests
#Verificamos si el dataset tiene NA's
sapply(my_data,function(x) any(is.na(x)))
#No queremos que el algoritmo dependa de una unidad variable arbitraria
my_data<-scale(my_data)
head(my_data)
#veamos las distancias entre cada estado
distance <- get_dist(my_data)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(my_data,centers = 2,nstart = 10)
str(my_kmeans_2)
my_kmeans_2
#Visualizamos el cluster
fviz_cluster(my_kmeans_2, data = my_data)
ggplot(aes(UrbanPop, Murder, color = factor(my_kmeans_2$cluster),
label = row.names(USArrests)),
data = as.data.frame(my_data)) +
geom_text()
#--------------------- Inicio: Visualizacion ------------------------------#
#"entrenamos" otros kmeans
my_kmeans_3 <- kmeans(my_data, centers = 3, nstart = 10)
my_kmeans_4 <- kmeans(my_data, centers = 4, nstart = 10)
my_kmeans_5 <- kmeans(my_data, centers = 5, nstart = 10)
# plots para comparar
plot_1 <- fviz_cluster(my_kmeans_2, geom = "point", data = my_data) + ggtitle("k = 2")
plot_2 <- fviz_cluster(my_kmeans_3, geom = "point",  data = my_data) + ggtitle("k = 3")
plot_3 <- fviz_cluster(my_kmeans_4, geom = "point",  data = my_data) + ggtitle("k = 4")
plot_4 <- fviz_cluster(my_kmeans_5, geom = "point",  data = my_data) + ggtitle("k = 5")
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = 2)
#--------------------- Fin: Visualizacion ------------------------------#
#---------------- Inicio: Numero optimo de clusters (Elbow method) --------------------#
set.seed(123)
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(my_data, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
#Manera mas rapida
set.seed(123)
fviz_nbclust(my_data, kmeans, method = "wss")
#---------------- Fin: Numero optimo de clusters (Elbow method) --------------------#
#---------------- Inicio: Numero optimo de clusters (Average Silhouette Method) --------------------#
# function to compute average silhouette for k clusters
avg_sil <- function(k) {
km.res <- kmeans(my_data, centers = k, nstart = 25)
ss <- silhouette(km.res$cluster, dist(my_data))
mean(ss[, 3])
}
# Compute and plot wss for k = 2 to k = 15
k.values <- 2:15
# extract avg silhouette for 2-15 clusters
avg_sil_values <- map_dbl(k.values, avg_sil)
plot(k.values, avg_sil_values,
type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters K",
ylab = "Average Silhouettes",
xlim=c(0,15))
#Manera automatica
fviz_nbclust(my_data, kmeans, method = "silhouette")
#---------------- Fin: Numero optimo de clusters (Average Silhouette Method) --------------------#
#---------------- Inicio: Numero optimo de clusters (Gap Statistic Method) --------------------#
# compute gap statistic
set.seed(123)
gap_stat <- clusGap(my_data, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
# Print the result
print(gap_stat, method = "firstmax")
#Manera automatica
fviz_gap_stat(gap_stat)
#---------------- Fin: Numero optimo de clusters (Gap Statistic Method) --------------------#
#---------------- Inicio: Resultados finales --------------------#
set.seed(123)
my_final_kmeans <- kmeans(my_data, 4, nstart = 10)
print(my_final_kmeans)
fviz_cluster(my_final_kmeans, data = my_data)
#centros de cada cluster
USArrests  %>%
mutate(Cluster = my_final_kmeans$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
#---------------- Fin: Resultados finales --------------------#
#---------------- Inicio: Evaluar una nueva observacion --------------------#
new_obs<-c(11,250,60,22)
classify_kmeans<-function(new_obs,your_kmeans){
my_dist<-c()
for(i in 1:nrow(your_kmeans$centers)){
dist_temp<-stats::dist(rbind(as.numeric(your_kmeans$centers[i,]),new_obs),method = "euclidean")
my_dist<-c(my_dist,dist_temp)
}
result<-which(my_dist==min(my_dist))
print(paste("La nueva observaci\u00f3n pertenece al cluster",result,
"donde estan las observaciones como:",
paste0(names(which(my_final_kmeans$cluster==result))[1:6],collapse = ", ")))
return(result)
}
my_class<-classify_kmeans(new_obs ,my_final_kmeans)
my_class
new_obs<-c(11,250,60,22)
your_kmeans<-my_final_kmeans
my_dist<-c()
for(i in 1:nrow(your_kmeans$centers)){
dist_temp<-stats::dist(rbind(as.numeric(your_kmeans$centers[i,]),new_obs),method = "euclidean")
my_dist<-c(my_dist,dist_temp)
}
result<-which(my_dist==min(my_dist))
my_final_kmeans$cluster==result
which(my_final_kmeans$cluster==result
)
names(which(my_final_kmeans$cluster==result))
if (!require("tidyverse")){install.packages("tidyverse",quiet = T) ; library("tidyverse")} # data manipulation
if (!require("cluster")){install.packages("cluster",quiet = T) ; library("cluster")} # clustering algorithms
if (!require("factoextra")){install.packages("factoextra",quiet = T) ; library("factoextra")} # clustering algorithms & visualization
if (!require("datasets")){install.packages("datasets",quiet = T) ; library("datasets")}
if (!require("gridExtra")){install.packages("gridExtra",quiet = T) ; library("gridExtra")}
print("All packages and functions have been installed or loaded...")
rm(list=ls())
#Leemos los datos
my_data<-NULL
#Verificamos si el dataset tiene NA's
sapply(my_data,function(x) any(is.na(x)))
#No queremos que el algoritmo dependa de una unidad variable arbitraria
my_data<- scale(my_data)
head(my_data)
if (!require("factoextra")){install.packages("factoextra",quiet = T) ; library("factoextra")} # clustering algorithms & visualization
#Leemos los datos
my_data<-USArrests
sapply(my_data,function(x) any(is.na(x)))
#No queremos que el algoritmo dependa de una unidad variable arbitraria
my_data<- (my_data)
head(my_data)
#veamos las distancias entre cada estado
distance <- NULL
NULL(NULL, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(NULL,centers = NULL,nstart = NULL)
str(my_kmeans_2)
my_kmeans_2
sapply(my_data,function(x) any(is.na(x)))
#No queremos que el algoritmo dependa de una unidad variable arbitraria
my_data<- (my_data)
head(my_data)
#No queremos que el algoritmo dependa de una unidad variable arbitraria
my_data<- scale(my_data)
head(my_data)
#veamos las distancias entre cada estado
distance <- get_dist(my_data)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(my_data,centers = 2,nstart = 10)
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(my_data,centers = 2,nstart = 10)
str(my_kmeans_2)
my_kmeans_2
kmeans?
?kmeans
my_kmeans_2$centers
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(my_data,centers = 4,nstart = 10)
str(my_kmeans_2)
my_kmeans_2
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(my_data,centers = 50,nstart = 10)
str(my_kmeans_2)
my_kmeans_2
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(my_data,centers = 50,nstart = 10)
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(my_data,centers = 48,nstart = 10)
str(my_kmeans_2)
my_kmeans_2
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(my_data,centers = 3,nstart = 10)
str(my_kmeans_2)
my_kmeans_2
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(my_data,centers = 5,nstart = 10)
str(my_kmeans_2)
my_kmeans_2
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(my_data,centers = 4,nstart = 10)
str(my_kmeans_2)
my_kmeans_2
#Visualizamos el cluster
fviz_cluster(my_kmeans_2, data = my_data)
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(my_data,centers = 6,nstart = 10)
str(my_kmeans_2)
my_kmeans_2
#Visualizamos el cluster
fviz_cluster(my_kmeans_2, data = my_data)
#"Entrenamos" el kmeans
my_kmeans_2<-kmeans(my_data,centers = 4,nstart = 10)
str(my_kmeans_2)
my_kmeans_2
#Visualizamos el cluster
fviz_cluster(my_kmeans_2, data = my_data)
ggplot(aes(UrbanPop, Murder, color = factor(my_kmeans_2$cluster),
label = row.names(USArrests)),
data = as.data.frame(my_data)) +
geom_text()
my_kmeans_3 <- kmeans(my_data, centers = 3, nstart = 10)
my_kmeans_4 <- kmeans(my_data, centers = 4, nstart = 10)
my_kmeans_5 <- kmeans(my_data, centers = 5, nstart = 10)
my_kmeans_6 <- kmeans(my_data, centers = 6, nstart = 10)
# plots para comparar
plot_1 <- fviz_cluster(my_kmeans_3, geom = "point", data = my_data) + ggtitle("my_kmeans_3")
plot_2 <- fviz_cluster(my_kmeans_4, geom = "point",  data = my_data) + ggtitle("my_kmeans_4")
plot_3 <- fviz_cluster(my_kmeans_5, geom = "point",  data = my_data) + ggtitle("my_kmeans_5")
plot_4 <- fviz_cluster(my_kmeans_6, geom = "point",  data = my_data) + ggtitle("my_kmeans_6")
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = 4)
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = c(2,2))
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = 4)
plot_1 <- fviz_cluster(my_kmeans_3, geom = "point", data = my_data) + ggtitle("my_kmeans_3")
plot_2 <- fviz_cluster(my_kmeans_4, geom = "point",  data = my_data) + ggtitle("my_kmeans_4")
plot_3 <- fviz_cluster(my_kmeans_5, geom = "point",  data = my_data) + ggtitle("my_kmeans_5")
plot_4 <- fviz_cluster(my_kmeans_6, geom = "point",  data = my_data) + ggtitle("my_kmeans_6")
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = NULL)
head(my_kmeans_3)
# plots para comparar
plot_1 <- fviz_cluster(my_kmeans_3["Murder", "Assault"], geom = "point") + ggtitle("my_kmeans_3")
my_kmeans_3["Murder", "Assault"]
my_kmeans_3[["Murder", "Assault"]]
my_kmeans_3[c("Murder", "Assault")]
my_kmeans_3["Murder"]
plot_1 <- fviz_cluster(my_kmeans_3, geom = "point", data = my_data) + ggtitle("my_kmeans_3")
plot_2 <- fviz_cluster(my_kmeans_4, geom = "point",  data = my_data) + ggtitle("my_kmeans_4")
plot_3 <- fviz_cluster(my_kmeans_5, geom = "point",  data = my_data) + ggtitle("my_kmeans_5")
plot_4 <- fviz_cluster(my_kmeans_6, geom = "point",  data = my_data) + ggtitle("my_kmeans_6")
par(mfrow=c(2,2))
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = NULL)
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = NULL)
grid.arrange(plot_1, plot_2, plot_3, plot_4, nrow = NULL)
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(my_data, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = NULL to k = NULL
k.values <- 1:15
# extract wss for NULL clusters
wss_values <- NULL(k.values, wss)
# extract wss for NULL clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
grid.arrange(plot_5)
grid.arrange(plot_5)
plot5 <- plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
grid.arrange(plot_5)
plot5 <- plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
grid.arrange(plot_5)
grid.arrange(plot5)
grid.arrange(plot5, nrow=NULL)
plot5 <- plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
mean(ss[, 3])
# Compute and plot wss for k = 2 to k = 15
k.values <- 2:15
# extract avg silhouette for 2-15 clusters
avg_sil_values <- map_dbl(k.values, avg_sil)
mean(ss[, 3])
ss <- silhouette(km.res$cluster, dist(my_data))
# function to compute average silhouette for k clusters
avg_sil <- function(k) {
km.res <- kmeans(my_data, centers = k, nstart = 25)
ss <- silhouette(km.res$cluster, dist(my_data))
mean(ss[, 3])
}
# Compute and plot wss for k = 2 to k = 15
k.values <- 2:15
# extract avg silhouette for 2-15 clusters
avg_sil_values <- map_dbl(k.values, avg_sil)
plot(avg_sil_values,
xlim=c(0,15))
ss <- silhouette(km.res$cluster, dist(my_data))
# function to compute average silhouette for k clusters
avg_sil <- function(k) {
km.res <- kmeans(my_data, centers = k, nstart = 25)
ss <- silhouette(km.res$cluster, dist(my_data))
mean(ss[, 3])
}
# Compute and plot wss for k = 2 to k = 15
k.values <- 2:15
# extract avg silhouette for 2-15 clusters
avg_sil_values <- map_dbl(k.values, avg_sil)
plot(k.values, avg_sil_values,
type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters K",
ylab = "Average Silhouettes",
xlim=c(0,15))
#Manera automatica
fviz_nbclust(my_data, kmeans, method = "silhouette")
plot(k.values, avg_sil_values,
type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters K",
ylab = "Average Silhouettes",
xlim=c(0,15))
#Manera automatica
fviz_nbclust(my_data, kmeans, method = "silhouette")
#Manera automatica
fviz_nbclust(my_data, kmeans, method = "silhouette")
#Manera automatica
fviz_nbclust(my_data, kmeans, method = "silhouette")
plot5 <- plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(my_data, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot5 <- plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
#Manera mas rapida
set.seed(123)
fviz_nbclust(my_data, kmeans, method = "wss")
gap_stat <- clusGap(my_data, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
# Print the result
print(gap_stat, method = "firstmax")
#Manera automatica
fviz_gap_stat(gap_stat)
#"entrenamos" otros kmeans
my_kmeans_3 <- kmeans(my_data, centers = 3, nstart = 10)
my_kmeans_3
new_obs<-c(11,250,60,22)
classify_kmeans<-function(new_obs,your_kmeans){
my_dist<-c()
for(i in 1:nrow(your_kmeans$centers)){
dist_temp<-stats::dist(rbind(as.numeric(your_kmeans$centers[i,]),new_obs),method = "euclidean")
my_dist<-c(my_dist,dist_temp)
}
result<-which(my_dist==min(my_dist))
print(paste("La nueva observaci\u00f3n pertenece al cluster",result,
"donde estan las observaciones como:",
paste0(names(which(my_final_kmeans$cluster==result))[1:6],collapse = ", ")))
return(result)
}
for(i in 1:nrow(your_kmeans$centers)){
dist_temp<-stats::dist(rbind(as.numeric(your_kmeans$centers[i,]),new_obs),method = "euclidean")
my_dist<-c(my_dist,dist_temp)
}
new_obs<-c(11,250,60,22)
classify_kmeans<-function(new_obs,your_kmeans){
my_dist<-c()
for(i in 1:nrow(your_kmeans$centers)){
dist_temp<-stats::dist(rbind(as.numeric(your_kmeans$centers[i,]),new_obs),method = "euclidean")
my_dist<-c(my_dist,dist_temp)
}
result<-which(my_dist==min(my_dist))
print(paste("La nueva observaci\u00f3n pertenece al cluster",result,
"donde estan las observaciones como:",
paste0(names(which(my_final_kmeans$cluster==result))[1:6],collapse = ", ")))
return(result)
}
my_class<-classify_kmeans(new_obs ,my_final_kmeans)
new_obs<-c(11,250,60,22)
classify_kmeans<-function(new_obs,your_kmeans){
my_dist<-c()
for(i in 1:nrow(your_kmeans$centers)){
dist_temp<-stats::dist(rbind(as.numeric(your_kmeans$centers[i,]),new_obs),method = "euclidean")
my_dist<-c(my_dist,dist_temp)
}
result<-which(my_dist==min(my_dist))
print(paste("La nueva observaci\u00f3n pertenece al cluster",result,
"donde estan las observaciones como:",
paste0(names(which(my_final_kmeans$cluster==result))[1:6],collapse = ", ")))
return(result)
}
my_class<-classify_kmeans(new_obs ,my_final_kmeans)
my_class<-classify_kmeans(new_obs ,classify_kmeans)
my_class<-classify_kmeans(new_obs ,my_final_kmeans)
classify_kmeans<-function(new_obs,your_kmeans){
my_dist<-c()
for(i in 1:nrow(your_kmeans$centers)){
dist_temp<-stats::dist(rbind(as.numeric(your_kmeans$centers[i,]),new_obs),method = "euclidean")
my_dist<-c(my_dist,dist_temp)
}
result<-which(my_dist==min(my_dist))
print(paste("La nueva observaci\u00f3n pertenece al cluster",result,
"donde estan las observaciones como:",
paste0(names(which(my_final_kmeans$cluster==result))[1:6],collapse = ", ")))
return(result)
}
set.seed(123)
my_final_kmeans <- kmeans(my_data, 4, nstart = 10)
print(my_final_kmeans)
fviz_cluster(my_final_kmeans, data = my_data)
new_obs<-c(11,250,60,22)
classify_kmeans<-function(new_obs,your_kmeans){
my_dist<-c()
for(i in 1:nrow(your_kmeans$centers)){
dist_temp<-stats::dist(rbind(as.numeric(your_kmeans$centers[i,]),new_obs),method = "euclidean")
my_dist<-c(my_dist,dist_temp)
}
result<-which(my_dist==min(my_dist))
print(paste("La nueva observaci\u00f3n pertenece al cluster",result,
"donde estan las observaciones como:",
paste0(names(which(my_final_kmeans$cluster==result))[1:6],collapse = ", ")))
return(result)
}
classify_kmeans<-function(new_obs,your_kmeans){
my_dist<-c()
for(i in 1:nrow(your_kmeans$centers)){
dist_temp<-stats::dist(rbind(as.numeric(your_kmeans$centers[i,]),new_obs),method = "euclidean")
my_dist<-c(my_dist,dist_temp)
}
result<-which(my_dist==min(my_dist))
print(paste("La nueva observaci\u00f3n pertenece al cluster",result,
"donde estan las observaciones como:",
paste0(names(which(my_final_kmeans$cluster==result))[1:6],collapse = ", ")))
return(result)
}
my_class<-classify_kmeans(new_obs ,my_final_kmeans)
my_class
