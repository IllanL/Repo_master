data_to_plot<-as.data.frame(tsne3D$Y)
#plot 3d usando libreria plotly
plot_ly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Coordenada 1 t-SNE'),
yaxis = list(title = 'Coordenada 2 t-SNE'),
zaxis = list(title = 'Coordenada 3 t-SNE')))
#damos formato a los datos
data_to_plot<-as.data.frame(tsne3D$Y)
#plot 3d usando libreria plotly
plot_ly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Coordenada 1 t-SNE'),
yaxis = list(title = 'Coordenada 2 t-SNE'),
zaxis = list(title = 'Coordenada 3 t-SNE')))
my_labels
colors
#plot 3d usando libreria plotly
plot_ly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Coordenada 1 t-SNE'),
yaxis = list(title = 'Coordenada 2 t-SNE'),
zaxis = list(title = 'Coordenada 3 t-SNE')))
#---------------------------------------------------------------------------------------------------#
#  ___           _          _                 _             ____    _   _   _____
# |_ _|  _ __   (_)   ___  (_)   ___    _    | |_          / ___|  | \ | | | ____|
#  | |  | '_ \  | |  / __| | |  / _ \  (_)   | __|  _____  \___ \  |  \| | |  _|
#  | |  | | | | | | | (__  | | | (_) |  _    | |_  |_____|  ___) | | |\  | | |___
# |___| |_| |_| |_|  \___| |_|  \___/  (_)    \__|         |____/  |_| \_| |_____|
#---------------------------------------------------------------------------------------------------#
# Este codigo es utilizado como ejemplo para entender el algoritmo de t-distributed Stochastic Neighbor Embedding.
#---------------------------------------------------------------------------------------------------#
rm(list=ls())
#Lectura de los datos de MNIST (numeros escritos a mano)
my_data <- as.data.frame(fread("./data_in/zip.train"))
#Tomamos solo 1/3 de los datos simplemente por costes computacionales
my_data <- sample_frac(my_data,1/3)
#Damos formato a los datos y guardamos la etiqueta
my_labels<-my_data$V1
my_data$V1<-as.factor(my_labels)
#Las siguientes linease se utilizan para realizar el plot y dar un correcto
# formato de visualizacion
colors <- rainbow(length(unique(my_data$V1)))
names(colors) <- unique(my_data$V1)
#Ejecutamos el algoritmo para los datos de MNIST, suprimiendo la columna de las etiquetas
tsne <- Rtsne(my_data[,-1], dims = 3, perplexity=30, verbose=TRUE, max_iter = 500)
#Hacemos un plot de los datos "vacio"
plot(tsne$Y, t='n', main="2D t-distributed Stochastic Neighbor Embedding para el MNIST dataset",
xlab = "t-SNE coordenada 1",ylab="t-SNE coordenada 2")
#Anadimos la etiqueta segun corresponda
text(tsne$Y, labels=my_labels, col=colors[my_data$V1])
#que pasa si hacemos lo mismo pero en 3 dimensiones
tsne3D <- Rtsne(my_data[,-1], dims = 3, perplexity=30, verbose=TRUE, max_iter = 500)
#damos formato a los datos
data_to_plot<-as.data.frame(tsne3D$Y)
#plot 3d usando libreria plotly
plot_ly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Coordenada 1 t-SNE'),
yaxis = list(title = 'Coordenada 2 t-SNE'),
zaxis = list(title = 'Coordenada 3 t-SNE')))
if (!require("plotly")){install.packages("plotly",quiet = T) ; library("plotly")}
plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
marker = list(color = ~mpg, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Miles/(US) gallon',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
marker = list(color = ~mpg, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE))
#plot 3d usando libreria plotly
plot_ly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers()
#plot 3d usando libreria plotly
plot_ly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Coordenada 1 t-SNE'),
yaxis = list(title = 'Coordenada 2 t-SNE'),
zaxis = list(title = 'Coordenada 3 t-SNE')))
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
marker = list(color = ~mpg, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Miles/(US) gallon',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
#plot 3d usando libreria plotly
plotly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Coordenada 1 t-SNE'),
yaxis = list(title = 'Coordenada 2 t-SNE'),
zaxis = list(title = 'Coordenada 3 t-SNE')))
plotly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers()
if (!require("plot_ly")){install.packages("plot_ly",quiet = T) ; library("plot_ly")}
if (!require("plotly")){install.packages("plotly",quiet = T) ; library("plotly")}
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
marker = list(color = ~mpg, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Miles/(US) gallon',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
p
library(plotly)
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
layout
plotly::layout
#plot 3d usando libreria plotly
plot_ly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'Coordenada 1 t-SNE'),
yaxis = list(title = 'Coordenada 2 t-SNE'),
zaxis = list(title = 'Coordenada 3 t-SNE')))
# Este codigo es utilizado como ejemplo para entender el algoritmo de t-distributed Stochastic Neighbor Embedding.
#---------------------------------------------------------------------------------------------------#
rm(list=ls())
#Lectura de los datos de MNIST (numeros escritos a mano)
my_data <- as.data.frame(fread("./data_in/zip.train"))
#Tomamos solo 1/3 de los datos simplemente por costes computacionales
my_data <- sample_frac(my_data,1/3)
#Damos formato a los datos y guardamos la etiqueta
my_labels<-my_data$V1
my_data$V1<-as.factor(my_labels)
#Las siguientes linease se utilizan para realizar el plot y dar un correcto
# formato de visualizacion
colors <- rainbow(length(unique(my_data$V1)))
names(colors) <- unique(my_data$V1)
#Ejecutamos el algoritmo para los datos de MNIST, suprimiendo la columna de las etiquetas
tsne <- Rtsne(my_data[,-1], dims = 3, perplexity=30, verbose=TRUE, max_iter = 500)
#Hacemos un plot de los datos "vacio"
plot(tsne$Y, t='n', main="2D t-distributed Stochastic Neighbor Embedding para el MNIST dataset",
xlab = "t-SNE coordenada 1",ylab="t-SNE coordenada 2")
#Anadimos la etiqueta segun corresponda
text(tsne$Y, labels=my_labels, col=colors[my_data$V1])
#que pasa si hacemos lo mismo pero en 3 dimensiones
tsne3D <- Rtsne(my_data[,-1], dims = 3, perplexity=30, verbose=TRUE, max_iter = 500)
#damos formato a los datos
data_to_plot<-as.data.frame(tsne3D$Y)
#plot 3d usando libreria plotly
plot_ly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'Coordenada 1 t-SNE'),
yaxis = list(title = 'Coordenada 2 t-SNE'),
zaxis = list(title = 'Coordenada 3 t-SNE')))
#Tarea: realizar un algoritmo de clustering que realice un agrupamiento como el de la imagen
z <- array(as.vector(as.matrix(my_data[row, -1])), dim = c(16, 16))
z <- z[, 16:1]  ##right side up
z <- array(as.vector(as.matrix(my_data[row, -1])), dim = c(16, 16))
my_data
head(my_data)
z <- array(as.vector(as.matrix(my_data[row, -1])), dim = c(16, 16))
as.matrix(my_data[row, -1])
#No ejecutar, a menos que se desee hacer plot de los numeros
row<-3
z <- array(as.vector(as.matrix(my_data[row, -1])), dim = c(16, 16))
z <- z[, 16:1]  ##right side up
par(mfrow = c(1, 1), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
image(1:16, 1:16, z, main = my_data[row, 1], col = RColorBrewer::CUSTOM_COLORS(256))
#No ejecutar, a menos que se desee hacer plot de los numeros
row<-3
z <- array(as.vector(as.matrix(my_data[row, -1])), dim = c(16, 16))
z <- z[, 16:1]  ##right side up
par(mfrow = c(1, 1), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
image(1:16, 1:16, z, main = my_data[row, 1], col = RColorBrewer::CUSTOM_COLORS(256))
COLORS <- c("white", "black")
CUSTOM_COLORS <- colorRampPalette(colors = COLORS)
CUSTOM_COLORS_PLOT <- colorRampPalette(brewer.pal(10, "Set3"))
?brewer.pal
if (!require("RColorBrewer")){install.packages("RColorBrewer",verbose = F) ; library("RColorBrewer")}
#No ejecutar, a menos que se desee hacer plot de los numeros
row<-3
COLORS <- c("white", "black")
CUSTOM_COLORS <- colorRampPalette(colors = COLORS)
CUSTOM_COLORS_PLOT <- colorRampPalette(brewer.pal(10, "Set3"))
z <- array(as.vector(as.matrix(my_data[row, -1])), dim = c(16, 16))
z <- z[, 16:1]  ##right side up
par(mfrow = c(1, 1), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
image(1:16, 1:16, z, main = my_data[row, 1], col = RColorBrewer::CUSTOM_COLORS(256))
image(1:16, 1:16, z, main = my_data[row, 1], col = CUSTOM_COLORS(256))
rm(list=ls())
#Lectura de los datos de MNIST (numeros escritos a mano)
my_data <- as.data.frame(fread("./data_in/zip.train"))
#Tomamos solo 1/3 de los datos simplemente por costes computacionales
my_data <- sample_frac(my_data,1/3)
#Damos formato a los datos y guardamos la etiqueta
my_labels<-my_data$V1
my_data$V1<-as.factor(my_labels)
#Las siguientes linease se utilizan para realizar el plot y dar un correcto
# formato de visualizacion
colors <- rainbow(length(unique(my_data$V1)))
names(colors) <- unique(my_data$V1)
#Ejecutamos el algoritmo para los datos de MNIST, suprimiendo la columna de las etiquetas
tsne <- Rtsne(my_data[,-1], dims = 3, perplexity=30, verbose=TRUE, max_iter = 500)
#Hacemos un plot de los datos "vacio"
plot(tsne$Y, t='n', main="2D t-distributed Stochastic Neighbor Embedding para el MNIST dataset",
xlab = "t-SNE coordenada 1",ylab="t-SNE coordenada 2")
#Anadimos la etiqueta segun corresponda
text(tsne$Y, labels=my_labels, col=colors[my_data$V1])
#que pasa si hacemos lo mismo pero en 3 dimensiones
tsne3D <- Rtsne(my_data[,-1], dims = 3, perplexity=30, verbose=TRUE, max_iter = 500)
#damos formato a los datos
data_to_plot<-as.data.frame(tsne3D$Y)
#plot 3d usando libreria plotly
plot_ly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'Coordenada 1 t-SNE'),
yaxis = list(title = 'Coordenada 2 t-SNE'),
zaxis = list(title = 'Coordenada 3 t-SNE')))
#Tarea: realizar un algoritmo de clustering que realice un agrupamiento como el de la imagen
#No ejecutar, a menos que se desee hacer plot de los numeros
row<-3
#---------------------------------------------------------------------------------------------------#
#  ___           _          _                 _             ____    _   _   _____
# |_ _|  _ __   (_)   ___  (_)   ___    _    | |_          / ___|  | \ | | | ____|
#  | |  | '_ \  | |  / __| | |  / _ \  (_)   | __|  _____  \___ \  |  \| | |  _|
#  | |  | | | | | | | (__  | | | (_) |  _    | |_  |_____|  ___) | | |\  | | |___
# |___| |_| |_| |_|  \___| |_|  \___/  (_)    \__|         |____/  |_| \_| |_____|
#---------------------------------------------------------------------------------------------------#
# Este codigo es utilizado como ejemplo para entender el algoritmo de t-distributed Stochastic Neighbor Embedding.
#---------------------------------------------------------------------------------------------------#
rm(list=ls())
#Lectura de los datos de MNIST (numeros escritos a mano)
my_data <- as.data.frame(fread("NULL"))
#Tomamos solo 1/3 de los datos simplemente por costes computacionales
my_data <- sample_frac(NULL,NULL)
#Damos formato a los datos y guardamos la etiqueta
my_labels<-my_data$V1
my_data$V1<-as.factor(my_labels)
#---------------------------------------------------------------------------------------------------#
#  ___           _          _                 _             ____    _   _   _____
# |_ _|  _ __   (_)   ___  (_)   ___    _    | |_          / ___|  | \ | | | ____|
#  | |  | '_ \  | |  / __| | |  / _ \  (_)   | __|  _____  \___ \  |  \| | |  _|
#  | |  | | | | | | | (__  | | | (_) |  _    | |_  |_____|  ___) | | |\  | | |___
# |___| |_| |_| |_|  \___| |_|  \___/  (_)    \__|         |____/  |_| \_| |_____|
#---------------------------------------------------------------------------------------------------#
# Este codigo es utilizado como ejemplo para entender el algoritmo de t-distributed Stochastic Neighbor Embedding.
#---------------------------------------------------------------------------------------------------#
rm(list=ls())
#Lectura de los datos de MNIST (numeros escritos a mano)
my_data <- as.data.frame(fread("./data_in/zip.train"))
#Tomamos solo 1/3 de los datos simplemente por costes computacionales
my_data <- sample_frac(my_data,1/3)
#Damos formato a los datos y guardamos la etiqueta
my_labels<-my_data$V1
my_data$V1<-as.factor(my_labels)
#Las siguientes linease se utilizan para realizar el plot y dar un correcto
# formato de visualizacion
colors <- rainbow(length(unique(my_data$V1)))
names(colors) <- unique(my_data$V1)
#Ejecutamos el algoritmo para los datos de MNIST, suprimiendo la columna de las etiquetas
tsne <- Rtsne(my_data[,-1], dims = 3, perplexity=30, verbose=TRUE, max_iter = 500)
#Hacemos un plot de los datos "vacio"
plot(tsne$Y, t='n', main="2D t-distributed Stochastic Neighbor Embedding para el MNIST dataset",
xlab = "t-SNE coordenada 1",ylab="t-SNE coordenada 2")
#Anadimos la etiqueta segun corresponda
text(tsne$Y, labels=my_labels, col=colors[my_data$V1])
#que pasa si hacemos lo mismo pero en 3 dimensiones
tsne3D <- Rtsne(my_data[,-1], dims = 3, perplexity=30, verbose=TRUE, max_iter = 500)
#damos formato a los datos
data_to_plot<-as.data.frame(tsne3D$Y)
#plot 3d usando libreria plotly
plot_ly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'Coordenada 1 t-SNE'),
yaxis = list(title = 'Coordenada 2 t-SNE'),
zaxis = list(title = 'Coordenada 3 t-SNE')))
#Tarea: realizar un algoritmo de clustering que realice un agrupamiento como el de la imagen
#No ejecutar, a menos que se desee hacer plot de los numeros
row<-3
z <- array(as.vector(as.matrix(my_data[row, -1])), dim = c(16, 16))
z <- z[, 16:1]  ##right side up
par(mfrow = c(1, 1), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
image(1:16, 1:16, z, main = my_data[row, 1], col = CUSTOM_COLORS(256))
if (!require("RColorBrewer")){install.packages("RColorBrewer",verbose = F) ; library("RColorBrewer")}
image(1:16, 1:16, z, main = my_data[row, 1], col = CUSTOM_COLORS(256))
?CUSTOM_COLORS
??CUSTOM_COLORS
COLORS <- c("white", "black")
CUSTOM_COLORS <- colorRampPalette(colors = COLORS)
CUSTOM_COLORS_PLOT <- colorRampPalette(brewer.pal(10, "Set3"))
z <- array(as.vector(as.matrix(my_data[row, -1])), dim = c(16, 16))
z <- z[, 16:1]  ##right side up
par(mfrow = c(1, 1), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
image(1:16, 1:16, z, main = my_data[row, 1], col = CUSTOM_COLORS(256))
#No ejecutar, a menos que se desee hacer plot de los numeros
row<-4
COLORS <- c("white", "black")
CUSTOM_COLORS <- colorRampPalette(colors = COLORS)
CUSTOM_COLORS_PLOT <- colorRampPalette(brewer.pal(10, "Set3"))
z <- array(as.vector(as.matrix(my_data[row, -1])), dim = c(16, 16))
z <- z[, 16:1]  ##right side up
par(mfrow = c(1, 1), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
image(1:16, 1:16, z, main = my_data[row, 1], col = CUSTOM_COLORS(256))
#Las siguientes linease se utilizan para realizar el plot y dar un correcto
# formato de visualizacion
colors <- rainbow(length(unique(my_data$V1)))
names(colors) <- unique(my_data$V1)
COLORS
colors
?rainbow
#Ejecutamos el algoritmo para los datos de MNIST, suprimiendo la columna de las etiquetas
tsne <- Rtsne(my_data[,-1], dims = 3, perplexity=30, verbose=TRUE, max_iter = 500)
#Hacemos un plot de los datos "vacio"
plot(tsne$Y, t='n', main="2D t-distributed Stochastic Neighbor Embedding para el MNIST dataset",
xlab = "t-SNE coordenada 1",ylab="t-SNE coordenada 2")
rm(list=ls())
#Lectura de los datos de MNIST (numeros escritos a mano)
my_data <- as.data.frame(fread("./data_in/zip.train"))
#Tomamos solo 1/3 de los datos simplemente por costes computacionales
my_data <- sample_frac(my_data,1/3)
#Damos formato a los datos y guardamos la etiqueta
my_labels<-my_data$V1
my_data$V1<-as.factor(my_labels)
#Las siguientes linease se utilizan para realizar el plot y dar un correcto
# formato de visualizacion
colors <- rainbow(length(unique(my_data$V1))) #use ?rainbow
names(colors) <- unique(my_data$V1)
#Ejecutamos el algoritmo para los datos de MNIST, suprimiendo la columna de las etiquetas
tsne <- Rtsne(my_data[,-1], dims = 3, perplexity=30, verbose=TRUE, max_iter = 500)
#Hacemos un plot de los datos "vacio"
plot(tsne$Y, t='n', main="2D t-distributed Stochastic Neighbor Embedding para el MNIST dataset",
xlab = "t-SNE coordenada 1",ylab="t-SNE coordenada 2")
#Anadimos la etiqueta segun corresponda
text(tsne$Y, labels=my_labels, col=colors[my_data$V1])
tsne$Y
#Ejecutamos el algoritmo para los datos de MNIST, suprimiendo la columna de las etiquetas
tsne <- Rtsne(my_data[,-1], dims = 2, perplexity=30, verbose=TRUE, max_iter = 500)
#Hacemos un plot de los datos "vacio"
plot(tsne$Y, t='n', main="2D t-distributed Stochastic Neighbor Embedding para el MNIST dataset",
xlab = "t-SNE coordenada 1",ylab="t-SNE coordenada 2")
#Anadimos la etiqueta segun corresponda
text(tsne$Y, labels=my_labels, col=colors[my_data$V1])
?Rtsne
tsne$Y
if (!require("dplyr")){install.packages("dplyr",quiet = T) ; library("dplyr")} # data manipulation
if (!require("data.table")){install.packages("data.table",quiet = T) ; library("data.table")}
if (!require("Rtsne")){install.packages("Rtsne",quiet = T) ; library("Rtsne")}
if (!require("plotly")){install.packages("plotly",quiet = T) ; library("plotly")}
if (!require("RColorBrewer")){install.packages("RColorBrewer",verbose = F) ; library("RColorBrewer")}
rm(list=ls())
#Lectura de los datos de MNIST (numeros escritos a mano)
my_data <- as.data.frame(fread("./data_in/zip.train"))
#Tomamos solo 1/3 de los datos simplemente por costes computacionales
my_data <- sample_frac(my_data,1/3)
#Damos formato a los datos y guardamos la etiqueta
my_labels<-my_data$V1
my_data$V1<-as.factor(my_labels)
#Las siguientes linease se utilizan para realizar el plot y dar un correcto
# formato de visualizacion
colors <- rainbow(length(unique(my_data$V1))) #use ?rainbow
names(colors) <- unique(my_data$V1)
#Ejecutamos el algoritmo para los datos de MNIST, suprimiendo la columna de las etiquetas
tsne <- Rtsne(my_data[,-1], dims = 2, verbose=TRUE, max_iter = 500)
#Hacemos un plot de los datos "vacio"
plot(tsne$Y, t='n', main="2D t-distributed Stochastic Neighbor Embedding para el MNIST dataset",
xlab = "t-SNE coordenada 1",ylab="t-SNE coordenada 2")
#Ejecutamos el algoritmo para los datos de MNIST, suprimiendo la columna de las etiquetas
tsne <- Rtsne(my_data[,-1], dims = 2, verbose=TRUE, max_iter = 800)
#Hacemos un plot de los datos "vacio"
plot(tsne$Y, t='n', main="2D t-distributed Stochastic Neighbor Embedding para el MNIST dataset",
xlab = "t-SNE coordenada 1",ylab="t-SNE coordenada 2")
#Ejecutamos el algoritmo para los datos de MNIST, suprimiendo la columna de las etiquetas
tsne <- Rtsne(my_data[,-1], dims = 2, verbose=TRUE, max_iter = 800)
tsne
#Ejecutamos el algoritmo para los datos de MNIST, suprimiendo la columna de las etiquetas
tsne <- Rtsne(my_data[,-1], dims = 2, verbose=TRUE, max_iter = 1500)
#Hacemos un plot de los datos "vacio"
plot(tsne$Y, t='n', main="2D t-distributed Stochastic Neighbor Embedding para el MNIST dataset",
xlab = "t-SNE coordenada 1",ylab="t-SNE coordenada 2")
#Anadimos la etiqueta segun corresponda
text(tsne$Y, labels=my_labels, col=colors[my_data$V1])
#que pasa si hacemos lo mismo pero en 3 dimensiones
tsne3D <- Rtsne(my_data[,-1], dims = 3, verbose=TRUE, max_iter = 500)
#plot 3d usando libreria plotly
plot_ly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'Coordenada 1 t-SNE'),
yaxis = list(title = 'Coordenada 2 t-SNE'),
zaxis = list(title = 'Coordenada 3 t-SNE')))
#damos formato a los datos
data_to_plot<-as.data.frame(tsne3D$Y)
#plot 3d usando libreria plotly
plot_ly(data_to_plot, x=~V1, y=~V2, z=~V3, color= as.factor(my_labels), colors = colors) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'Coordenada 1 t-SNE'),
yaxis = list(title = 'Coordenada 2 t-SNE'),
zaxis = list(title = 'Coordenada 3 t-SNE')))
my_kmeans_AAA <- kmeans(tsne3D, centers = 10, nstart = 10)ç
my_kmeans_AAA <- kmeans(tsne3D, centers = 10, nstart = 10)
tsne3D
my_kmeans_AAA <- kmeans(tsne3D$Y, centers = 10, nstart = 10)
my_kmeans_AAA
fviz_cluster(my_kmeans_AAA, geom = "point", data = my_data) + ggtitle("k = 2")
MATRIZ_CONFUSION=table(my_kmeans_AAA, my_labels)
MATRIZ_CONFUSION=table(my_kmeans_AAA$Y, my_labels)
len(my_kmeans_AAA)
length(my_kmeans_AAA)
len(my_kmeans_AAA$Y)
length(my_kmeans_AAA$Y)
MATRIZ_CONFUSION=table(my_kmeans_AAA, my_labels)
my_kmeans_AAA
MATRIZ_CONFUSION=table(my_kmeans_AAA$cluster, my_labels)
MATRIZ_CONFUSION
my_kmeans_AAA$cluster
MATRIZ_CONFUSION
diag(MATRIZ_CONFUSION)
MATRIZ_CONFUSION[order(c(10,7,1,5,3,4,2,8,6,9)),]
MATRIZ_CONFUSION[,order(c(10,7,1,5,3,4,2,8,6,9))]
sum(diag(MATRIZ_CONFUSION[order(c(10,7,1,5,3,4,2,8,6,9)),]))/sum(MATRIZ_CONFUSION)
MATRIZ_NUEVA=MATRIZ_CONFUSION[order(c(10,7,1,5,3,4,2,8,6,9)),]
sum(diag(MATRIZ_NUEVA))/sum(MATRIZ_NUEVA)
plot(MATRIZ_NUEVA)
VECTOR=[]
for i in c(1,lenght(col(MATRIZ_NUEVA))){
VECTOR(i)=MATRIZ_NUEVA[i,i]/(MATRIZ_NUEVA[i])
}
VECTOR=[]
for (i in c(1,lenght(col(MATRIZ_NUEVA)))){
VECTOR(i)=MATRIZ_NUEVA[i,i]/(MATRIZ_NUEVA[i])
}
VECTOR=[]
for (i in c(1,length(col(MATRIZ_NUEVA)))){
VECTOR(i)=MATRIZ_NUEVA[i,i]/(MATRIZ_NUEVA[i])
}
VECTOR=[]
for (i in c(1,length(col(MATRIZ_NUEVA)))){
VECTOR[i]=MATRIZ_NUEVA[i,i]/(MATRIZ_NUEVA[i])
}
VECTOR=[]
VECTOR=array(c())
VECTOR=c()
for (i in c(1,length(col(MATRIZ_NUEVA)))){
VECTOR[i]=MATRIZ_NUEVA[i,i]/(MATRIZ_NUEVA[i])
}
for (i in c(1,length(col(MATRIZ_NUEVA)))){
VECTOR[i]=MATRIZ_NUEVA[i-1,i]/(MATRIZ_NUEVA[i])
}
for (i in c(1,length(col(MATRIZ_NUEVA)))){
VECTOR[i]=MATRIZ_NUEVA[i,i]/(MATRIZ_NUEVA[i])
}
VECTOR=array(c(1:10))
VECTOR
for (i in c(1,length(col(MATRIZ_NUEVA)))){
VECTOR[i]=MATRIZ_NUEVA[i-1,i]/(MATRIZ_NUEVA[i])
}
for (i in c(1,length(col(MATRIZ_NUEVA)))){
VECTOR[i]=MATRIZ_NUEVA[i-1,i]/sum(MATRIZ_NUEVA[i])
}
sum(MATRIZ_NUEVA[1]
VECTOR=array(c(1:10))
for (i in c(1,length(col(MATRIZ_NUEVA)))){
VECTOR[i]=MATRIZ_NUEVA[i-1,i]/sum(MATRIZ_NUEVA[,i])
}
sum(MATRIZ_NUEVA[,1]
sum(diag(MATRIZ_NUEVA))/sum(MATRIZ_NUEVA)
MATRIZ_NUEVA[1,1]/sum(MATRIZ_NUEVA[,1])
MATRIZ_NUEVA
MATRIZ_NUEVA=MATRIZ_CONFUSION[order(c(10,7,1,5,3,4,2,8,6,9)),]
MATRIZ_NUEVA
fviz_cluster(my_kmeans_AAA, geom = "point", data = my_data) + ggtitle("k = 2")
MATRIZ_CONFUSION=table(my_kmeans_AAA$cluster, my_labels)
MATRIZ_CONFUSION
MATRIZ_NUEVA=MATRIZ_CONFUSION[order(c(10,7,1,5,3,4,2,8,6,9)),]
MATRIZ_NUEVA
MATRIZ_NUEVA=MATRIZ_CONFUSION[order(c(10,7,1,5,3,4,2,8,6,9)),]
MATRIZ_NUEVA
MATRIZ_NUEVA=MATRIZ_CONFUSION[,order(c(10,7,1,5,3,4,2,8,6,9))]
MATRIZ_NUEVA
sum(diag(MATRIZ_NUEVA))/sum(MATRIZ_NUEVA)
MATRIZ_NUEVA[1,1]/sum(MATRIZ_NUEVA[,1])
plot(MATRIZ_NUEVA)
