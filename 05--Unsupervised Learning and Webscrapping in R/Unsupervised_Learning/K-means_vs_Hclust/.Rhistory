}
plot_kmeans(points1, 2)
points1$hclust_assignments <- points1 %>% dplyr::select(x, y) %>%
dist() %>% hclust(method = "single") %>%
cutree(2) %>% factor()
ggplot(points1, aes(x, y, color = hclust_assignments)) + geom_point() +
labs(color = "hclust assignments")
points1_polar <- points1 %>% transform(r = sqrt(x^2 + y^2), theta = atan(y / x))
clust <- points1_polar %>% ungroup %>% dplyr::select(r, theta) %>% kmeans(2)
ggplot(augment(clust, points1_polar), aes(r, theta)) + geom_point(aes(color = .cluster)) +
geom_point(aes(x1, x2), data = tidy(clust), size = 10, shape = "x") +
labs(color = "K-means assignments")
sizes <- c(20, 100, 500)
set.seed(2015)
centers <- data_frame(x = c(1, 4, 6), y = c(5, 0, 6), n = sizes,
cluster = factor(1:3))
points <- centers %>% group_by(cluster) %>%
do(data_frame(x = rnorm(.$n, .$x), y = rnorm(.$n, .$y)))
ggplot(points, aes(x, y)) + geom_point()
plot_kmeans(points, 3)
knitr::opts_chunk$set(cache = FALSE, message = FALSE, echo = FALSE)
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
anscombe_tidy <- anscombe %>%
mutate(observation = seq_len(n())) %>%
gather(key, value, -observation) %>%
separate(key, c("variable", "set"), 1, convert = TRUE) %>%
mutate(set = c("I", "II", "III", "IV")[set]) %>%
spread(variable, value)
ggplot(anscombe_tidy, aes(x, y)) + geom_point() + facet_wrap(~ set) +
geom_smooth(method = "lm", se = FALSE)
library(plyr)
library(dplyr)
library(ggplot2)
set.seed(2015)
n <- 250
c1 <- data_frame(x = rnorm(n), y = rnorm(n), cluster = 1)
c2 <- data_frame(r = rnorm(n, 5, .25), theta = runif(n, 0, 2 * pi),
x = r * cos(theta), y = r * sin(theta), cluster = 2) %>%
dplyr::select(x, y, cluster)
c1
c2
c1 <- data_frame(x = rnorm(n), y = rnorm(n), cluster = 1)
c2 <- data_frame(r = rnorm(n, 5, .25), theta = runif(n, 0, 2 * pi),
x = r * cos(theta), y = r * sin(theta), cluster = 2) %>%
dplyr::select(x, y, cluster)
points1 <- rbind(c1, c2) %>% mutate(cluster = factor(cluster))
ggplot(points1, aes(x, y)) + geom_point()
dat=as.data.frame(points1)
library(plotly)
plotly(points1)
plotly(points1, x=~x,y=~y)
plotly(points1, x= ~x,y= ~y)
plot_ly(points1, x= ~x,y= ~y)
plot_ly(points1, x= ~x,y= ~y,type = "scatter")
plot_ly(points1, x= ~x,y= ~y,type = "scatterplot")
plot_ly(points1, x= ~x,y= ~y,type = "scatter")
plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)
plot_ly(points1, x= ~x,y= ~y,type = "scatter")
plot_ly(points1, x= ~x,y= ~y,type = "scatter",marker=list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
plot_ly(points1, x= ~x,y= ~y,type = "scatter") %>%
addmarker(list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
plot_ly(points1, x= ~x,y= ~y,type = "scatter") %>%
add_markers(list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
plot_ly(points1, x= ~x,y= ~y,type = "scatter")
plot_ly(points1, x= ~x,y= ~y,type = "scatter", markers=list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
plot_ly(points1, x= ~x,y= ~y,type = "scatter", markers=list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
plot_ly(points1, x= ~x,y= ~y,type = "scatter", marker=list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
plot_ly(points1, x= ~x,y= ~y,type = "scatter", marker=list(size = 3,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
plot_ly(points1, x= ~x,y= ~y,type = "scatter", marker=list(size = 4,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
plot_ly(points1, x= ~x,y= ~y,type = "scatter",
marker=list(size = 4, color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',width = 2)))
plot_ly(points1, x= ~x,y= ~y,type = "scatter",
marker=list(size = 5, color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',width = 2)))
plot_ly(points1, x= ~x,y= ~y,type = "scatter",
marker=list(size = 5, color = 'red',
line = list(color = 'rgba(152, 0, 0, .8)',width = 2)))
points1
plot_ly(points1, x= ~x,y= ~y, colors= ~cluster, type = "scatter") %>%
add_markers(list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
plot_ly(points1, x= ~x,y= ~y,type = "scatter",colors= ~cluster,
marker=list(size = 5, color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',width = 2)))
plot_ly(points1, x= ~x,y= ~y,type = "scatter",colors= ~cluster)
data_to_plot<-points1
data_to_plot$cluster<-as.factor(data_to_plot$cluster)
plot_ly(points1, x= ~x,y= ~y,type = "scatter",colors= ~cluster)
data_to_plot<-as.data.frame(points1)
data_to_plot$cluster<-as.factor(data_to_plot$cluster)
plot_ly(points1, x= ~x,y= ~y,type = "scatter",colors= ~cluster)
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",colors= ~cluster)
data_to_plot$cluster
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster)
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
knitr::opts_chunk$set(cache = FALSE, message = FALSE, echo = FALSE)
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
anscombe_tidy <- anscombe %>%
mutate(observation = seq_len(n())) %>%
gather(key, value, -observation) %>%
separate(key, c("variable", "set"), 1, convert = TRUE) %>%
mutate(set = c("I", "II", "III", "IV")[set]) %>%
spread(variable, value)
ggplot(anscombe_tidy, aes(x, y)) + geom_point() + facet_wrap(~ set) +
geom_smooth(method = "lm", se = FALSE)
library(plyr)
library(dplyr)
library(ggplot2)
set.seed(2015)
n <- 250
c1 <- data_frame(x = rnorm(n), y = rnorm(n), cluster = 1)
c2 <- data_frame(r = rnorm(n, 5, .25), theta = runif(n, 0, 2 * pi),
x = r * cos(theta), y = r * sin(theta), cluster = 2) %>%
dplyr::select(x, y, cluster)
points1 <- rbind(c1, c2) %>% mutate(cluster = factor(cluster))
ggplot(points1, aes(x, y)) + geom_point()
points1
dat
clust <- dat %>% ungroup %>% dplyr::select(x, y) %>% kmeans(k)
clust
class(dat)
class(clust)
k=2
my_kmeans<- kmeans(dat[,c("x","y")],k)
my_kmeans$cluster
plot_kmeans <- function(dat, k) {
my_kmeans<- kmeans(dat[,c("x","y")],k)
data_to_plot<-data.frame(points1,factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
}
plot_kmeans(points1, 2)
plot_kmeans <- function(dat, k) {
my_kmeans<- kmeans(dat[,c("x","y")],k)
data_to_plot<-data.frame(points1,factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set2")
}
plot_kmeans(points1, 2)
plot_kmeans <- function(dat, k) {
my_kmeans<- kmeans(dat[,c("x","y")],k)
data_to_plot<-data.frame(points1,factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set3")
}
plot_kmeans(points1, 2)
plot_kmeans <- function(dat, k) {
my_kmeans<- kmeans(dat[,c("x","y")],k)
data_to_plot<-data.frame(points1,factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors=c(1,2))
}
plot_kmeans(points1, 2)
plot_kmeans <- function(dat, k) {
my_kmeans<- kmeans(dat[,c("x","y")],k)
data_to_plot<-data.frame(points1,factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors=c("red","blue"))
}
plot_kmeans(points1, 2)
plot_kmeans <- function(dat, k) {
my_kmeans<- kmeans(dat[,c("x","y")],k)
data_to_plot<-data.frame(points1,factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
}
plot_kmeans(points1, 2)
points1$hclust_assignments <- points1 %>% dplyr::select(x, y) %>%
dist() %>% hclust(method = "single") %>%
cutree(2) %>% factor()
ggplot(points1, aes(x, y, color = hclust_assignments)) + geom_point() +
labs(color = "hclust assignments")
points1_polar <- points1 %>% transform(r = sqrt(x^2 + y^2), theta = atan(y / x))
clust <- points1_polar %>% ungroup %>% dplyr::select(r, theta) %>% kmeans(2)
ggplot(augment(clust, points1_polar), aes(r, theta)) + geom_point(aes(color = .cluster)) +
geom_point(aes(x1, x2), data = tidy(clust), size = 10, shape = "x") +
labs(color = "K-means assignments")
knitr::opts_chunk$set(cache = FALSE, message = FALSE, echo = FALSE)
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
anscombe_tidy <- anscombe %>%
mutate(observation = seq_len(n())) %>%
gather(key, value, -observation) %>%
separate(key, c("variable", "set"), 1, convert = TRUE) %>%
mutate(set = c("I", "II", "III", "IV")[set]) %>%
spread(variable, value)
ggplot(anscombe_tidy, aes(x, y)) + geom_point() + facet_wrap(~ set) +
geom_smooth(method = "lm", se = FALSE)
library(plyr)
library(dplyr)
library(ggplot2)
set.seed(2015)
n <- 250
c1 <- data_frame(x = rnorm(n), y = rnorm(n), cluster = 1)
c2 <- data_frame(r = rnorm(n, 5, .25), theta = runif(n, 0, 2 * pi),
x = r * cos(theta), y = r * sin(theta), cluster = 2) %>%
dplyr::select(x, y, cluster)
points1 <- rbind(c1, c2) %>% mutate(cluster = factor(cluster))
dat=points1
k=2
my_kmeans<- kmeans(dat[,c("x","y")],k)
data_to_plot<-data.frame(points1,factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
my_kmeans<- kmeans(dat[,c("x","y")],k)
rm(data_to_plot)
data_to_plot<-data.frame(dat[,c("x","y")],cluster=factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
head(data_to_plot)
hclust(points1[,c("x","y")])
hclust(points1[,c("x","y")],method = "single")
dist_mat <- dist(points1[,c("x","y")], method = 'euclidean')
hclust(dist_mat,method = "single")
dist_mat <- dist(points1[,c("x","y")], method = 'euclidean')
my_hclust<-hclust(dist_mat,method = "single")
my_hclust$merge
my_hclust$height
my_hclust$order
my_hclust$dist.method
my_hclust$call
my_hclust$labels
points1$hclust_assignments <- points1 %>% dplyr::select(x, y) %>%
dist() %>% hclust(method = "single") %>%
cutree(2) %>% factor()
hclust_assignments
points1
my_hclust<-hclust(dist_mat,method = "single")
dist_mat <- dist(points1[,c("x","y")], method = 'euclidean')
my_hclust<-hclust(dist_mat,method = "single")
my_hclust$labels
plot(my_hclust)
?hclust
factor(my_hclust)
my_hclust %>% cutree(2)
cutree(my_hclust )
cutree(my_hclust,2 )
data_to_plot<-data.frame(dat[,c("x","y")],cluster=factor(labels))
dist_mat <- dist(points1[,c("x","y")], method = 'euclidean')
my_hclust<-hclust(dist_mat,method = "single",)
labels<-cutree(my_hclust,2)
data_to_plot<-data.frame(dat[,c("x","y")],cluster=factor(labels))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
points1_polar <- points1 %>% transform(r = sqrt(x^2 + y^2), theta = atan(y / x))
plot_kmeans <- function(dat, k) {
my_kmeans<- kmeans(dat[,c("x","y")],k)
data_to_plot<-data.frame(dat[,c("x","y")],cluster=factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
}
plot_kmeans(points1_polar, 2)
points1_polar <- points1 %>% transform(r = sqrt(x^2 + y^2), theta = atan(y / x))
plot_kmeans(points1_polar, 2)
clust <- points1_polar %>% ungroup %>% dplyr::select(r, theta) %>% kmeans(2)
ggplot(augment(clust, points1_polar), aes(r, theta)) + geom_point(aes(color = .cluster)) +
geom_point(aes(x1, x2), data = tidy(clust), size = 10, shape = "x") +
labs(color = "K-means assignments")
points1_polar <- points1 %>% transform(r = sqrt(x^2 + y^2), theta = atan(y / x))
points1_polar
head(points1_polar)
points1_polar <- points1 %>% transform(r = sqrt(x^2 + y^2), theta = atan(y / x))
my_kmeans<- kmeans(points1_polar[,c("r","theta")],k)
data_to_plot<-data.frame(points1_polar[,c("r","theta")],cluster=factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~r,y= ~theta,type = "scatter",color= ~cluster,
colors="Set1")
sizes <- c(20, 100, 500)
set.seed(2015)
centers <- data_frame(x = c(1, 4, 6), y = c(5, 0, 6), n = sizes,
cluster = factor(1:3))
points <- centers %>% group_by(cluster) %>%
do(data_frame(x = rnorm(.$n, .$x), y = rnorm(.$n, .$y)))
ggplot(points, aes(x, y)) + geom_point()
plot_kmeans(points, 3)
dist_mat <- dist(points[,c("x","y")], method = 'euclidean')
my_hclust<-hclust(dist_mat,method = "single",)
labels<-cutree(my_hclust,2)
labels<-cutree(my_hclust,3)
dist_mat <- dist(points[,c("x","y")], method = 'euclidean')
my_hclust<-hclust(dist_mat,method = "single",)
labels<-cutree(my_hclust,3)
data_to_plot<-data.frame(dat[,c("x","y")],cluster=factor(labels))
labels
length(labels)
nrow(poins)
nrow(points)
dist_mat <- dist(points[,c("x","y")], method = 'euclidean')
my_hclust<-hclust(dist_mat,method = "single",)
labels<-cutree(my_hclust,3)
data_to_plot<-data.frame(points[,c("x","y")],cluster=factor(labels))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
my_kmeans<- kmeans(points[,c("x","y")],k)
data_to_plot<-data.frame(points[,c("x","y")],cluster=factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
k<-3
my_kmeans<- kmeans(points[,c("x","y")],k)
data_to_plot<-data.frame(points[,c("x","y")],cluster=factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
sizes <- c(20, 100, 500)
set.seed(2015)
centers <- data_frame(x = c(1, 4, 6), y = c(5, 0, 6), n = sizes,
cluster = factor(1:3))
points <- centers %>% group_by(cluster) %>%
do(data_frame(x = rnorm(.$n, .$x), y = rnorm(.$n, .$y)))
ggplot(points, aes(x, y)) + geom_point()
plot_ly(points, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
plot_ly(points, x= ~x,y= ~y,type = "scatter",
colors="Set1")
knitr::opts_chunk$set(cache = FALSE, message = FALSE, echo = FALSE)
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
anscombe_tidy <- anscombe %>%
mutate(observation = seq_len(n())) %>%
gather(key, value, -observation) %>%
separate(key, c("variable", "set"), 1, convert = TRUE) %>%
mutate(set = c("I", "II", "III", "IV")[set]) %>%
spread(variable, value)
ggplot(anscombe_tidy, aes(x, y)) + geom_point() + facet_wrap(~ set) +
geom_smooth(method = "lm", se = FALSE)
rm(list=ls())
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
rm(list=ls())
set.seed(2015)
n <- 250
c1 <- data_frame(x = rnorm(n), y = rnorm(n), cluster = 1)
if (!require("plyr")){install.packages("plyr",quiet = T) ; library("plyr")} # data manipulation
set.seed(2015)
n <- 250
c1 <- data_frame(x = rnorm(n), y = rnorm(n), cluster = 1)
if (!require("dplyr")){install.packages("dplyr",quiet = T) ; library("dplyr")} # data manipulation
rm(list=ls())
set.seed(2015)
n <- 250
c1 <- data_frame(x = rnorm(n), y = rnorm(n), cluster = 1)
c2 <- data_frame(r = rnorm(n, 5, .25), theta = runif(n, 0, 2 * pi),
x = r * cos(theta), y = r * sin(theta), cluster = 2) %>%
dplyr::select(x, y, cluster)
points1 <- rbind(c1, c2) %>% mutate(cluster = factor(cluster))
points1
c1 <- data.frame(x = rnorm(n), y = rnorm(n), cluster = 1)
c1
c2 <- data.frame(r = rnorm(n, 5, .25), theta = runif(n, 0, 2 * pi),
x = r * cos(theta), y = r * sin(theta), cluster = 2)
c2 <- data_frame(r = rnorm(n, 5, .25), theta = runif(n, 0, 2 * pi),
x = r * cos(theta), y = r * sin(theta), cluster = 2) %>%
dplyr::select(x, y, cluster)
c2
rm(list=ls())
#Vector semilla para obtener mismos resultados estudiantes/profesor
set.seed(2015)
#Simulamos los datos utilizando la libreria dplyr
n <- 250
c1 <- data_frame(x = rnorm(n), y = rnorm(n), cluster = 1)
c2 <- data_frame(r = rnorm(n, 5, .25), theta = runif(n, 0, 2 * pi),
x = r * cos(theta), y = r * sin(theta), cluster = 2) %>%
dplyr::select(x, y, cluster)
c2 <- data_frame(r = rnorm(n, 5, .25), theta = runif(n, 0, 2 * pi),
x = r * cos(theta), y = r * sin(theta), cluster = 2) %>%
dplyr::select(x, y, cluster)
points1 <- rbind(c1, c2) %>% mutate(cluster = factor(cluster))
my_kmeans<- kmeans(points1[,c("x","y")],k)
data_to_plot<-data.frame(points1[,c("x","y")],cluster=factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
my_kmeans<- kmeans(points1[,c("x","y")],k)
#Entrenamos un k-means y hacemos una visualizacion de los datos
k<-2
my_kmeans<- kmeans(points1[,c("x","y")],k)
data_to_plot<-data.frame(points1[,c("x","y")],cluster=factor(my_kmeans$cluster))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
# hacemos un plot con la libreria plot_ly
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster, colors="Set1")
## Hacemos lo propio para un hierarchical clustering
dist_mat <- dist(points1[,c("x","y")], method = 'euclidean')
my_hclust<-hclust(dist_mat,method = "single")
labels<-cutree(my_hclust,2) #la funcion cutree permite dividir el hclust en el total de ramas que se deseen
data_to_plot<-data.frame(dat[,c("x","y")],cluster=factor(labels))
data_to_plot<-data.frame(points1[,c("x","y")],cluster=factor(labels))
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
points1_polar <- points1 %>% transform(r = sqrt(x^2 + y^2), theta = atan(y / x)) #la funcion transform permite realizar cambios de base
points1_polar <- points1 %>% transform(r = sqrt(x^2 + y^2), theta = atan(y / x)) #la funcion transform permite realizar cambios de base
my_kmeans<- kmeans(points1_polar[,c("r","theta")],k) #entrenamos nuestro kmeans para k centros
# hacemos un plot con la libreria plot_ly
plot_ly(data_to_plot, x= ~r,y= ~theta,type = "scatter",color= ~cluster,colors="Set1")
## Que pasa si entrenamos un kmeans para coordenadas polares?
points1_polar <- points1 %>% transform(r = sqrt(x^2 + y^2), theta = atan(y / x)) #la funcion transform permite realizar cambios de base
my_kmeans<- kmeans(points1_polar[,c("r","theta")],k) #entrenamos nuestro kmeans para k centros
data_to_plot<-data.frame(points1_polar[,c("r","theta")],cluster=factor(my_kmeans$cluster)) #seleccionamos las variables a plotear
# hacemos un plot con la libreria plot_ly
plot_ly(data_to_plot, x= ~r,y= ~theta,type = "scatter",color= ~cluster,colors="Set1")
#Datos desbalanceados, como funciona el kmeans?
sizes <- c(20, 100, 500)
rm(list=ls())
sizes <- c(20, 100, 500) #tamano de los clusters
set.seed(2015)
#Creamos el dataset simulado
centers <- data_frame(x = c(1, 4, 6), y = c(5, 0, 6), n = sizes,cluster = factor(1:3))
points <- centers %>% group_by(cluster) %>%
do(data_frame(x = rnorm(.$n, .$x), y = rnorm(.$n, .$y)))
plot_ly(points, x= ~x,y= ~y,type = "scatter",colors="Set1")
#Entrenamos nuestro kmeans
k<-3
my_kmeans<- kmeans(points[,c("x","y")],k)
data_to_plot<-data.frame(points[,c("x","y")],cluster=factor(my_kmeans$cluster))
#Usamos plotly para graficar
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,colors="Set1")
#Hacemos lo propio para hclust
dist_mat <- dist(points[,c("x","y")], method = 'euclidean')
my_hclust<-hclust(dist_mat,method = "single")
labels<-cutree(my_hclust,3)
data_to_plot<-data.frame(points[,c("x","y")],cluster=factor(labels))
#Graficamos con plotly
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,
colors="Set1")
#Hacemos lo propio para hclust
dist_mat <- dist(points[,c("x","y")], method = 'euclidean')
my_hclust<-hclust(dist_mat,method = "single")
labels<-cutree(my_hclust,4)
data_to_plot<-data.frame(points[,c("x","y")],cluster=factor(labels))
#Graficamos con plotly
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,colors="Set1")
#Entrenamos nuestro kmeans
k<-3
my_kmeans<- kmeans(points[,c("x","y")],k)
data_to_plot<-data.frame(points[,c("x","y")],cluster=factor(my_kmeans$cluster))
#Usamos plotly para graficar
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,colors="Set1")
#Hacemos lo propio para hclust
dist_mat <- dist(points[,c("x","y")], method = 'euclidean')
my_hclust<-hclust(dist_mat,method = "single")
labels<-cutree(my_hclust,k)
#Graficamos con plotly
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,colors="Set1")
data_to_plot<-data.frame(points[,c("x","y")],cluster=factor(labels))
labels<-cutree(my_hclust,k) #Prueba colocar 4
data_to_plot<-data.frame(points[,c("x","y")],cluster=factor(labels))
#Graficamos con plotly
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,colors="Set1")
labels<-cutree(my_hclust,4) #Prueba colocar 4
data_to_plot<-data.frame(points[,c("x","y")],cluster=factor(labels))
#Graficamos con plotly
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,colors="Set1")
#Entrenamos nuestro kmeans
k<-3
my_kmeans<- kmeans(points[,c("x","y")],k)
data_to_plot<-data.frame(points[,c("x","y")],cluster=factor(my_kmeans$cluster))
#Usamos plotly para graficar
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster,colors="Set1")
#Hacemos lo propio para hclust
dist_mat <- dist(points[,c("x","y")], method = 'euclidean')
rm(list=ls())
#Vector semilla para obtener mismos resultados estudiantes/profesor
set.seed(2015)
#Simulamos los datos utilizando la libreria dplyr
n <- 250
c1 <- data_frame(x = rnorm(n), y = rnorm(n), cluster = 1)
c2 <- data_frame(r = rnorm(n, 5, .25), theta = runif(n, 0, 2 * pi),
x = r * cos(theta), y = r * sin(theta), cluster = 2) %>%
dplyr::select(x, y, cluster)
points1 <- rbind(c1, c2) %>% mutate(cluster = factor(cluster))
k<-2 #definimos el numero de centros
my_kmeans<- kmeans(points1[,c("x","y")],k) #entrenamos nuestro kmeans
data_to_plot<-data.frame(points1[,c("x","y")],cluster=factor(my_kmeans$cluster)) #seleccionamos solo las variables a "plotear"
# hacemos un plot con la libreria plot_ly
plot_ly(data_to_plot, x= ~x,y= ~y,type = "scatter",color= ~cluster, colors="Set1")
